package com.org.coop.bs.util;

import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.coop.org.exception.RetailException;
import com.coop.org.exception.RetailStockEntryException;
import com.org.coop.canonical.retail.beans.RetailStockEntryBean;
import com.org.coop.retail.entities.Account;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.Customer;
import com.org.coop.retail.entities.MaterialMaster;
import com.org.coop.retail.entities.StockEntry;
import com.org.coop.retail.repositories.AccountRepository;
import com.org.coop.retail.repositories.CustomerRepository;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.repositories.RetailMaterialMasterRepository;
import com.org.coop.retail.repositories.RetailStockEntryRepository;
import com.org.coop.retail.service.FinancialYearCloseServiceImpl;

@Service
public class CommonValidationUtils {
	
	private static final Logger log = Logger.getLogger(CommonValidationUtils.class); 
	
	@Autowired
	protected RetailMaterialMasterRepository retailMaterialMasterRepository;
	
	@Autowired
	protected RetailBranchMasterRepository retailBranchMasterRepository;
	
	@Autowired
	protected RetailStockEntryRepository retailStockEntryRepository;
	
	@Autowired
	protected CustomerRepository customerRepository;
	
	@Autowired
	protected AccountRepository accountRepository;
	
	@Autowired
	protected AdminSvcCommonUtil adminSvcCommonUtil;
	
	@Autowired
	protected FinancialYearCloseServiceImpl financialYearCloseServiceImpl;
	
	public MaterialMaster validateMaterial(int materialId) {
		MaterialMaster materialMaster = null;
		if(materialId > 0) {
			materialMaster = retailMaterialMasterRepository.findOne(materialId);
		}
		if(materialMaster == null || materialId == 0) {
			String errorMsg = "Material does not exists in our record for material Id: " + materialId;
			log.error(errorMsg);
			throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_STOCK_SALE);
		}
		return materialMaster;
	}
	
	public BranchMaster validateBranch(int branchId) {
		BranchMaster branch = null;
		if(branchId > 0) {
			branch = retailBranchMasterRepository.findOne(branchId);
		}
		if(branch == null || branchId == 0) {
			String errorMsg = "Branch does not exists in our record for branch Id: " + branchId;
			log.error(errorMsg);
			throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_STOCK_SALE);
		}
		return branch;
	}
	
	public StockEntry validateStock(int stockId) {
		StockEntry stockEntry = null;
		if(stockId > 0) {
			stockEntry = retailStockEntryRepository.findOne(stockId);
		}
		if(stockEntry == null || stockId == 0) {
			String errorMsg = "Stock does not exists in our record for stock Id: " + stockId;
			log.error(errorMsg);
			throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_STOCK_SALE);
		}
		
		return stockEntry;
	}
	
	public Customer validateCustomer(int customerId) {
		Customer customer = null;
		if(customerId > 0) {
			customer = customerRepository.findOne(customerId);
		}
		if(customer == null || customerId == 0) {
			String errorMsg = "Customer does not exists in our record for customer Id: " + customerId;
			log.error(errorMsg);
			throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_CUSTOMER_MGMT);
		}
		
		return customer;
	}
	
	public Account validateAccount(int accountId) {
		Account account = null;
		if(accountId > 0) {
			account = accountRepository.findOne(accountId);
		}
		if(account == null || accountId == 0) {
			String errorMsg = "Account does not exists in our record for account Id: " + accountId;
			log.error(errorMsg);
			throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_CUSTOMER_ACCOUNT);
		}
		
		return account;
	}
	
	/**
	 * Action date can not be null
	 * @param actionDate
	 */
	public void actionDateNotNull(Date actionDate) {
		if(actionDate == null) {
			String msg = "Action date must be selected";
			log.error(msg);
			throw new RetailStockEntryException(msg, RetailBusinessConstants.EXCEPTION_RETAIL_STOCK_ENTRY);
		}
	}
	
	/**
	 * If financial year is closed then entry is not permitted
	 * @param branchId
	 * @param actionDate
	 * @return
	 */
	public boolean isYearClosed(int branchId, Date actionDate) {
		if(actionDate == null) {
			actionDate = new Date();
		}
		String fy = adminSvcCommonUtil.getFinancialYear(actionDate);
		
		if(log.isDebugEnabled()) {
			log.debug("Selected FY = " + fy);
		}
		
		boolean isYearClosed = financialYearCloseServiceImpl.isFinancialYearClosed(branchId, fy);
		
		if(log.isDebugEnabled()) {
			log.debug("Financial year : " + fy + " closed: " + isYearClosed);
		}
		
		if(isYearClosed) {
			String msg = "Financial year closed for the selected date: " + actionDate;
			log.error(msg);
			throw new RetailStockEntryException(msg, RetailBusinessConstants.EXCEPTION_COMMON);
		}
		return isYearClosed;
	}
}
