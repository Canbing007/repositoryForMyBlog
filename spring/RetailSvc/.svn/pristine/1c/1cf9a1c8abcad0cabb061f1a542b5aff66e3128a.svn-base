package com.org.coop.customer.ws;

import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.service.RetailStockManagementServiceImpl;

@RestController
@RequestMapping("/rest")
public class RetailStockManagementWSImpl {
	
	private static final Logger log = Logger.getLogger(RetailStockManagementWSImpl.class); 
	
	@Autowired
	private RetailStockManagementServiceImpl retailStockManagementServiceImpl;
	
	@RequestMapping(value = "/getStockEntries", method = RequestMethod.GET, headers="Accept=application/json",produces="application/json")
	public UIModel getStockEntries(@RequestParam(value = "branchId",required = true,defaultValue = "0") Integer branchId,
							@RequestParam(value = "vendorId",required = true,defaultValue = "0") Integer vendorId,
							@RequestParam(value = "materialId",required = true,defaultValue = "0") Integer materialId,
							@RequestParam(value = "pageNo",required = true,defaultValue = "0") Integer pageNo,
							@RequestParam(value = "recordsPerPage",required = true,defaultValue = "0") Integer recordsPerPage,
							@RequestParam(value = "challanNo",required = true,defaultValue = "") String challanNo,
							@RequestParam(value = "billNo",required = true,defaultValue = "") String billNo,
							@DateTimeFormat(pattern="dd/MM/yyyy")@Param("startDate") Date startDate,
							@DateTimeFormat(pattern="dd/MM/yyyy")@Param("endDate") Date endDate) {
		UIModel uiModel = new UIModel();
		try {
			uiModel = retailStockManagementServiceImpl.getStockEntries(branchId, vendorId, materialId, pageNo, recordsPerPage, challanNo, billNo, startDate, endDate);
		} catch (Exception e) {
			log.error("Error Retrieving stock entries", e);
			uiModel.setErrorMsg("Error Retrieving stock entries: " + vendorId);
		}
		return uiModel;
	}
	
	@RequestMapping(value = "/saveStockEntries", method = RequestMethod.POST, headers="Accept=application/json",produces="application/json")
	public UIModel saveStockEntries(@RequestBody UIModel uiModel) {
		uiModel = retailStockManagementServiceImpl.saveStockEntries(uiModel);
		return uiModel;
	}
	
	@RequestMapping(value = "/deleteStockEntries", method = RequestMethod.DELETE, headers="Accept=application/json",produces="application/json")
	public UIModel deleteStockEntries(@RequestBody UIModel uiModel) {
		try {
			uiModel = retailStockManagementServiceImpl.deleteStockEntries(uiModel);
		} catch (Exception e) {
			log.error("Error while deleting stock entries", e);
			uiModel.setErrorMsg("Error while deleting stock entries a material: " + uiModel.getBranchBean().getStockEntries().get(0).getMaterialId());
		}
		return uiModel;
	}
	
	@RequestMapping(value = "/getStockReturns", method = RequestMethod.GET, headers="Accept=application/json",produces="application/json")
	public UIModel getStockReturns(@RequestParam(value = "materialId",required = true,defaultValue = "0") Integer materialId,
							@DateTimeFormat(pattern="dd/MM/yyyy")@Param("startDate") Date startDate,
							@DateTimeFormat(pattern="dd/MM/yyyy")@Param("endDate") Date endDate,
							@RequestParam(value = "pageNo",required = true,defaultValue = "0") Integer pageNo,
							@RequestParam(value = "recordsPerPage",required = true,defaultValue = "0") Integer recordsPerPage) {
		UIModel uiModel = new UIModel();
		try {
			uiModel = retailStockManagementServiceImpl.getStockReturns(materialId, startDate, endDate, pageNo, recordsPerPage);
		} catch (Exception e) {
			log.error("Error Retrieving stock returns", e);
			uiModel.setErrorMsg("Error Retrieving stock returns: ");
		}
		return uiModel;
	}
	
	@RequestMapping(value = "/saveStockReturns", method = RequestMethod.POST, headers="Accept=application/json",produces="application/json")
	public UIModel saveStockReturns(@RequestBody UIModel uiModel) {
		try {
			uiModel = retailStockManagementServiceImpl.saveStockReturns(uiModel);
		} catch (Exception e) {
			log.error("Error while returning stock entries", e);
			uiModel.setErrorMsg("Error while returning stock entries a material: " + uiModel.getBranchBean().getStockEntries().get(0).getMaterialId());
		}
		return uiModel;
	}
	
	@RequestMapping(value = "/deleteStockReturns", method = RequestMethod.DELETE, headers="Accept=application/json",produces="application/json")
	public UIModel deleteStockReturns(@RequestBody UIModel uiModel) {
		try {
			uiModel = retailStockManagementServiceImpl.deleteStockReturns(uiModel);
		} catch (Exception e) {
			log.error("Error while returning stock entries", e);
			uiModel.setErrorMsg("Error while returning stock entries a material: " + uiModel.getBranchBean().getStockEntries().get(0).getMaterialId());
		}
		return uiModel;
	}
}
