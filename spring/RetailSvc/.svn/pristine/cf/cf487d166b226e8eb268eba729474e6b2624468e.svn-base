package com.org.coop.retail.servicehelper;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.coop.org.exception.PaymentException;
import com.coop.org.exception.RetailException;
import com.org.coop.bs.util.RetailBusinessConstants;
import com.org.coop.canonical.account.beans.CardRegisterBean;
import com.org.coop.canonical.account.beans.CashRegisterBean;
import com.org.coop.canonical.account.beans.ChequeRegisterBean;
import com.org.coop.canonical.account.beans.CreditRegisterBean;
import com.org.coop.canonical.account.beans.GlLedgerDtlBean;
import com.org.coop.canonical.account.beans.LoanRegisterBean;
import com.org.coop.canonical.account.beans.TransactionPaymentBean;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.GlLedgerMappingImpl;
import com.org.coop.retail.bs.mapper.PaymentMappingImpl;
import com.org.coop.retail.entities.CardRegister;
import com.org.coop.retail.entities.CashRegister;
import com.org.coop.retail.entities.ChequeRegister;
import com.org.coop.retail.entities.CreditRegister;
import com.org.coop.retail.entities.GlLedgerDtl;
import com.org.coop.retail.entities.GlMaster;
import com.org.coop.retail.entities.LedgerCodePayment;
import com.org.coop.retail.entities.LoanRegister;
import com.org.coop.retail.entities.TransactionPayment;
import com.org.coop.retail.repositories.CardRegisterRepository;
import com.org.coop.retail.repositories.CashRegisterRepository;
import com.org.coop.retail.repositories.ChequeRegisterRepository;
import com.org.coop.retail.repositories.CreditRegisterRepository;
import com.org.coop.retail.repositories.GlLedgerDtlRepository;
import com.org.coop.retail.repositories.GlMasterRepository;
import com.org.coop.retail.repositories.LedgerCodePaymentRepository;
import com.org.coop.retail.repositories.LoanRegisterRepository;
import com.org.coop.retail.repositories.TransactionPaymentRepository;

@Service
public class PaymentServiceHelperImpl {

	private static final Logger log = Logger.getLogger(PaymentServiceHelperImpl.class); 
	
	@Autowired
	private PaymentMappingImpl paymentMappingImpl;
	
	@Autowired
	private CashRegisterRepository cashRegisterRepository;
	
	@Autowired
	private CardRegisterRepository cardRegisterRepository;
	
	@Autowired
	private CreditRegisterRepository creditRegisterRepository;
	
	@Autowired
	private ChequeRegisterRepository chequeRegisterRepository;
	
	@Autowired
	private LoanRegisterRepository loanRegisterRepository;
	
	@Autowired
	private TransactionPaymentRepository transactionPaymentRepository;
	
	@Autowired
	private LedgerCodePaymentRepository ledgerCodePaymentRepository;
	
	@Autowired 
	private GlMasterRepository glMasterRepository;
	
	@Autowired 
	private GlLedgerMappingImpl glLedgerMappingImpl;
	
	@Autowired 
	private GlLedgerDtlRepository glLedgerDtlRepository;
	
	/**
	 *
	/* Make an entry into transaction_payment table for all modes of payment (CASH/CARD/Advance) etc.
	 * Then enter card payment detail into corresponding table like cash_register, card_register,
	 * advance_register, cheque_register, credit_register
	 * @param paymentBean
	 */
	@Transactional(value="retailTransactionManager")
	public void makePayment(TransactionPaymentBean paymentBean, String operation) {
		
		//*************************************
		// Retrieve all gl_mas_code for payments
		//*************************************
		List<LedgerCodePayment> ledgerCodePayments = ledgerCodePaymentRepository.findAll();
		Map<String, Integer> ledgerCodePaymentMap = new HashMap<String, Integer>();
		for(LedgerCodePayment lcp : ledgerCodePayments) {
			ledgerCodePaymentMap.put(lcp.getPaymentType(), lcp.getGlCode());
		}
		
		//*********************************
		// CASH PAYMENT
		//*********************************
		if(paymentBean.getCashRegisters() != null && paymentBean.getCashRegisters().size() > 0) {
			if(log.isDebugEnabled()) {
				log.debug("Making payment by CASH");
			}
			for(CashRegisterBean cashRegisterBean : paymentBean.getCashRegisters()) {
				cashRegisterBean.setGlTranId(paymentBean.getGlTranId());
				
				TransactionPayment payment = null;
				if(cashRegisterBean.getPaymentId() == 0) {
					payment = new TransactionPayment(); 
				} else {
					payment = transactionPaymentRepository.findOne(cashRegisterBean.getPaymentId());
				}
				
				paymentMappingImpl.mapCashPaymentBean(cashRegisterBean, payment);
				transactionPaymentRepository.saveAndFlush(payment);
				paymentBean.setPaymentType(payment.getPaymentType());
				paymentBean.setGlTranId(payment.getGlLedgerHrd().getGlTranId());
				
				cashRegisterBean.setPaymentId(payment.getPaymentId());
				
				int cashId = cashRegisterBean.getCashId();
				CashRegister cash = null;
				if(cashId == 0) {
					cash = new CashRegister();
				} else {
					cash = cashRegisterRepository.findOne(cashId);
				}
				
				paymentMappingImpl.mapCashPaymentDtlBean(cashRegisterBean, cash);
				cashRegisterRepository.saveAndFlush(cash);
				cashRegisterBean.setCashId(cash.getCashId());
				paymentBean.setAmount(cash.getAmount());
				
				// Populate gl_ledger_dtls now
				populateGlLedgerDtls(paymentBean, ledgerCodePaymentMap, RetailBusinessConstants.CREDIT, operation);
			}
		}
		
		//*********************************
		// CARD PAYMENT
		//*********************************
		if(paymentBean.getCardRegisters() != null && paymentBean.getCardRegisters().size() > 0) {
			if(log.isDebugEnabled()) {
				log.debug("Making payment by CARD");
			}
			for(CardRegisterBean cardRegisterBean : paymentBean.getCardRegisters()) {
				cardRegisterBean.setGlTranId(paymentBean.getGlTranId());

				TransactionPayment payment = null;
				if(cardRegisterBean.getPaymentId() == 0) {
					payment = new TransactionPayment(); 
				} else {
					payment = transactionPaymentRepository.findOne(cardRegisterBean.getPaymentId());
				}
				paymentMappingImpl.mapCardPaymentBean(cardRegisterBean, payment);
				transactionPaymentRepository.saveAndFlush(payment);
				paymentBean.setPaymentType(payment.getPaymentType());
				paymentBean.setGlTranId(payment.getGlLedgerHrd().getGlTranId());
				
				cardRegisterBean.setPaymentId(payment.getPaymentId());
				
				int cardId = cardRegisterBean.getCardId();
				CardRegister card = null;
				if(cardId == 0) {
					card = new CardRegister();
				} else {
					card = cardRegisterRepository.findOne(cardId);
				}
				paymentMappingImpl.mapCardPaymentDtlBean(cardRegisterBean, card);
				cardRegisterRepository.saveAndFlush(card);
				cardRegisterBean.setCardId(card.getCardId());
				paymentBean.setAmount(card.getAmount());
				
				// Populate gl_ledger_dtls now
				populateGlLedgerDtls(paymentBean, ledgerCodePaymentMap, RetailBusinessConstants.CREDIT, operation);
			}
		}
		
		//*********************************
		// CREDIT PAYMENT
		//*********************************
		if(paymentBean.getCreditRegisters() != null && paymentBean.getCreditRegisters().size() > 0) {
			if(log.isDebugEnabled()) {
				log.debug("Making payment by CREDIT");
			}
			for(CreditRegisterBean creditRegisterBean : paymentBean.getCreditRegisters()) {
				creditRegisterBean.setGlTranId(paymentBean.getGlTranId());
				TransactionPayment payment = null;
				if(creditRegisterBean.getPaymentId() == 0) {
					payment = new TransactionPayment(); 
				} else {
					payment = transactionPaymentRepository.findOne(creditRegisterBean.getPaymentId());
				}
				paymentMappingImpl.mapCreditPaymentBean(creditRegisterBean, payment);
				transactionPaymentRepository.saveAndFlush(payment);
				paymentBean.setPaymentType(payment.getPaymentType());
				paymentBean.setGlTranId(payment.getGlLedgerHrd().getGlTranId());
				
				creditRegisterBean.setPaymentId(payment.getPaymentId());
				
				int creditId = creditRegisterBean.getCreditId();
				CreditRegister credit = null;
				if(creditId == 0) {
					credit = new CreditRegister();
				} else {
					credit = creditRegisterRepository.findOne(creditId);
				}
				paymentMappingImpl.mapCreditPaymentDtlBean(creditRegisterBean, credit);
				creditRegisterRepository.saveAndFlush(credit);
				creditRegisterBean.setCreditId(credit.getCreditId());
				paymentBean.setAmount(credit.getAmount());
				
				// Populate gl_ledger_dtls now
				populateGlLedgerDtls(paymentBean, ledgerCodePaymentMap, RetailBusinessConstants.CREDIT, operation);
			}
		}
		
		//*********************************
		// CHEQUE PAYMENT
		//*********************************
		if(paymentBean.getChequeRegisters() != null && paymentBean.getChequeRegisters().size() > 0) {
			if(log.isDebugEnabled()) {
				log.debug("Making payment by CHEQUE");
			}
			for(ChequeRegisterBean chequeRegisterBean : paymentBean.getChequeRegisters()) {
				chequeRegisterBean.setGlTranId(paymentBean.getGlTranId());
				TransactionPayment payment = null;
				if(chequeRegisterBean.getPaymentId() == 0) {
					payment = new TransactionPayment(); 
				} else {
					payment = transactionPaymentRepository.findOne(chequeRegisterBean.getPaymentId());
				}
				paymentMappingImpl.mapChequePaymentBean(chequeRegisterBean, payment);
				transactionPaymentRepository.saveAndFlush(payment);
				paymentBean.setPaymentType(payment.getPaymentType());
				paymentBean.setGlTranId(payment.getGlLedgerHrd().getGlTranId());
				
				chequeRegisterBean.setPaymentId(payment.getPaymentId());
				
				int chequeId = chequeRegisterBean.getChequeId();
				ChequeRegister cheque = null;
				if(chequeId == 0) {
					cheque = new ChequeRegister();
				} else {
					cheque = chequeRegisterRepository.findOne(chequeId);
				}
				paymentMappingImpl.mapChequePaymentDtlBean(chequeRegisterBean, cheque);
				chequeRegisterRepository.saveAndFlush(cheque);
				chequeRegisterBean.setChequeId(cheque.getChequeId());
				paymentBean.setAmount(cheque.getAmount());
				
				// Populate gl_ledger_dtls now
				populateGlLedgerDtls(paymentBean, ledgerCodePaymentMap, RetailBusinessConstants.CREDIT, operation);
			}
		}
		
		//*********************************
		// LOAN PAYMENT
		//*********************************
		if(paymentBean.getLoanRegisters() != null && paymentBean.getLoanRegisters().size() > 0) {
			if(log.isDebugEnabled()) {
				log.debug("Making payment by LOAN");
			}
			for(LoanRegisterBean loanRegisterBean : paymentBean.getLoanRegisters()) {
				loanRegisterBean.setGlTranId(paymentBean.getGlTranId());

				TransactionPayment payment = null;
				if(loanRegisterBean.getPaymentId() == 0) {
					payment = new TransactionPayment(); 
				} else {
					payment = transactionPaymentRepository.findOne(loanRegisterBean.getPaymentId());
				}
				
				paymentMappingImpl.mapLoanPaymentBean(loanRegisterBean, payment);
				transactionPaymentRepository.saveAndFlush(payment);
				paymentBean.setPaymentType(payment.getPaymentType());
				paymentBean.setGlTranId(payment.getGlLedgerHrd().getGlTranId());
				
				loanRegisterBean.setPaymentId(payment.getPaymentId());
				
				int loanId = loanRegisterBean.getLoanId();
				LoanRegister loan = null;
				if(loanId == 0) {
					loan = new LoanRegister();
				} else {
					loan = loanRegisterRepository.findOne(loanId);
				}
				
				paymentMappingImpl.mapLoanPaymentDtlBean(loanRegisterBean, loan);
				loanRegisterRepository.saveAndFlush(loan);
				loanRegisterBean.setLoanId(loan.getLoanId());
				paymentBean.setAmount(loan.getAmount());
				
				// Populate gl_ledger_dtls now
				populateGlLedgerDtls(paymentBean, ledgerCodePaymentMap, RetailBusinessConstants.CREDIT, operation);
			}
		}
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel getPayment(int branchId, int glTranId, Date startDate, Date endDate, int pageNo, int recordsPerPage) {
		List<TransactionPayment> payments = transactionPaymentRepository.findByBranchIdAndGlTranId(branchId, glTranId);
		if(payments == null || payments.size() == 0) {
			String msg = "No payment found for the GL transaction id: " + glTranId + " for the branch id: " + branchId;
			log.error(msg);
			throw new RetailException(msg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
		}
		
		UIModel uiModel = new UIModel();
		uiModel.setBranchBean(new BranchBean());
		uiModel.getBranchBean().setBranchId(branchId);
		uiModel.getBranchBean().setPayments(new ArrayList<TransactionPaymentBean>());
		TransactionPaymentBean transactionPaymentBean = new TransactionPaymentBean();
		uiModel.getBranchBean().getPayments().add(transactionPaymentBean);
		
		List<CashRegisterBean> cashRegisters = new ArrayList<CashRegisterBean>();
		List<CardRegisterBean> cardRegisters = new ArrayList<CardRegisterBean>();
		List<CreditRegisterBean> creditRegisters = new ArrayList<CreditRegisterBean>();
		List<ChequeRegisterBean> chequeRegisters = new ArrayList<ChequeRegisterBean>();
		List<LoanRegisterBean> loanRegisters = new ArrayList<LoanRegisterBean>();
		
		transactionPaymentBean.setCashRegisters(cashRegisters);
		transactionPaymentBean.setCardRegisters(cardRegisters);
		transactionPaymentBean.setChequeRegisters(chequeRegisters);
		transactionPaymentBean.setCreditRegisters(creditRegisters);
		transactionPaymentBean.setLoanRegisters(loanRegisters);
		
		for(TransactionPayment payment : payments) {
			if(RetailBusinessConstants.MODE_OF_PAYMENT_CASH.equals(payment.getPaymentType())) {
				for(CashRegister cashRegister : payment.getCashRegisters()) {
					CashRegisterBean cashRegisterBean = new CashRegisterBean();
					paymentMappingImpl.mapCashPaymentDtlBean(cashRegister, cashRegisterBean);
					cashRegisters.add(cashRegisterBean);
					transactionPaymentBean.setTranNo(cashRegisterBean.getTranNo());
					transactionPaymentBean.setGlTranId(cashRegisterBean.getGlTranId());
				}
			} else if(RetailBusinessConstants.MODE_OF_PAYMENT_CARD.equals(payment.getPaymentType())) {
				for(CardRegister cardRegister : payment.getCardRegisters()) {
					CardRegisterBean cardRegisterBean = new CardRegisterBean();
					paymentMappingImpl.mapCardPaymentDtlBean(cardRegister, cardRegisterBean);
					cardRegisters.add(cardRegisterBean);
					transactionPaymentBean.setTranNo(cardRegisterBean.getTranNo());
					transactionPaymentBean.setGlTranId(cardRegisterBean.getGlTranId());
				}
			} else if(RetailBusinessConstants.MODE_OF_PAYMENT_CHEQUE.equals(payment.getPaymentType())) {
				for(ChequeRegister chequeRegister : payment.getChequeRegisters()) {
					ChequeRegisterBean chequeRegisterBean = new ChequeRegisterBean();
					paymentMappingImpl.mapChequePaymentDtlBean(chequeRegister, chequeRegisterBean);
					chequeRegisters.add(chequeRegisterBean);
					transactionPaymentBean.setTranNo(chequeRegisterBean.getTranNo());
					transactionPaymentBean.setGlTranId(chequeRegisterBean.getGlTranId());
				}
			} else if(RetailBusinessConstants.MODE_OF_PAYMENT_CREDIT.equals(payment.getPaymentType()) || 
					RetailBusinessConstants.MODE_OF_PAYMENT_ADVANCE.equals(payment.getPaymentType())) {
				for(CreditRegister creditRegister : payment.getCreditRegisters()) {
					CreditRegisterBean creditRegisterBean = new CreditRegisterBean();
					paymentMappingImpl.mapCreditPaymentDtlBean(creditRegister, creditRegisterBean);
					creditRegisters.add(creditRegisterBean);
					transactionPaymentBean.setTranNo(creditRegisterBean.getTranNo());
					transactionPaymentBean.setGlTranId(creditRegisterBean.getGlTranId());
				}
			} else if(RetailBusinessConstants.MODE_OF_PAYMENT_LOAN.equals(payment.getPaymentType())) {
				for(LoanRegister loanRegister : payment.getLoanRegisters()) {
					LoanRegisterBean loanRegisterBean = new LoanRegisterBean();
					paymentMappingImpl.mapLoanPaymentDtlBean(loanRegister, loanRegisterBean);
					loanRegisters.add(loanRegisterBean);
					transactionPaymentBean.setTranNo(loanRegisterBean.getTranNo());
					transactionPaymentBean.setGlTranId(loanRegisterBean.getGlTranId());
				}
			}
		}
		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deletePayment(UIModel uiModel) {
		int branchId = uiModel.getBranchBean().getBranchId();
		int glTranId = uiModel.getBranchBean().getPayments().get(0).getGlTranId();
		
		List<TransactionPayment> payments = transactionPaymentRepository.findByBranchIdAndGlTranId(branchId, glTranId);
		if(payments == null || payments.size() == 0) {
			String errorMsg = "No payment records found for branchId: " + branchId + " and glTranId = " + glTranId;
			log.error(errorMsg);
			throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
		}
		makePayment(uiModel.getBranchBean().getPayments().get(0), "DELETE");
		for(TransactionPayment payment : payments) {
			transactionPaymentRepository.delete(payment);
			if(log.isDebugEnabled()) {
				log.debug("Deleting payment for paymentid: " + payment.getPaymentId());
			}
		}
		List<GlLedgerDtl> glLedgerDtls = glLedgerDtlRepository.findByGlTranId(glTranId);
		if(glLedgerDtls == null || glLedgerDtls.size() == 0) {
			String errorMsg = "GlLedgerDtls not available for gl_tran_id in gl_ledger_dtls table " + glTranId;
			log.error(errorMsg);
			throw new PaymentException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT_DELETE);
		}
		glLedgerDtlRepository.delete(glLedgerDtls);
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	private void populateGlLedgerDtls(TransactionPaymentBean paymentBean, Map<String, Integer> ledgerCodePaymentMap, String drCr, String operation) {
		
		// 1. gl_ledger_hrd has to be populated before populating gl_ledger_dtl table
		if(paymentBean.getGlTranId() == 0) {
			String errorMsg = "gl_ledger_hrd has to be populated first before populating gl_ledger_dtl";
			log.error(errorMsg);
			throw new PaymentException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
		}
		
		// 2. gl_mas_code can not be zero for any kinds of payments
		int glMasCode = ledgerCodePaymentMap.get(paymentBean.getPaymentType());
		if(glMasCode == 0) {
			String errorMsg = "gl_mas_code can not be zero for this payment";
			log.error(errorMsg);
			throw new PaymentException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
		}
		
		GlMaster glMaster = glMasterRepository.findOne(glMasCode);
		
		// 3. gl_mas_code must be available
		if(glMaster == null) {
			String errorMsg = "gl_mas_code " + glMasCode + " is not configured in our record";
			log.error(errorMsg);
			throw new PaymentException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
		}
		
		// 4. Populate GlLedgerDtlBean data.
		GlLedgerDtl glLedgerDtl = new GlLedgerDtl();
		GlLedgerDtlBean glLedgerDtlBean = new GlLedgerDtlBean();
		glLedgerDtlBean.setAccountId(paymentBean.getAccountId());
		glLedgerDtlBean.setGlMasCode(glMasCode);
		glLedgerDtlBean.setBranchId(paymentBean.getBranchId());
		glLedgerDtlBean.setGlTranId(paymentBean.getGlTranId());
		glLedgerDtlBean.setCreateUser(paymentBean.getCreateUser());
		glLedgerDtlBean.setDrCr(drCr);
		glLedgerDtlBean.setAmount(paymentBean.getAmount());
		glLedgerDtlBean.setRemarks(paymentBean.getRemarks());
		
		if(!"DELETE".equals(operation)) {
			glLedgerMappingImpl.mapGlLedgerDtlBean(glLedgerDtlBean, glLedgerDtl);
			glLedgerDtlRepository.saveAndFlush(glLedgerDtl);
		} else {
//			List<GlLedgerDtl> glLedgerDtls = glLedgerDtlRepository.findByGlTranId(paymentBean.getGlTranId());
			if(log.isDebugEnabled()) {
				log.debug("gl_ledger_dlt modification is allowed");
			}
		}
	}
}
