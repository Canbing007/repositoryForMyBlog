package com.org.coop.admin.service;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.coop.org.exception.SecurityQuestionNotSetException;
import com.org.coop.admin.servicehelper.AdminLoginServiceHelper;
import com.org.coop.canonical.beans.SecurityQnA;

@Service
public class AdminLoginServiceImpl implements AdminLoginService {
	private static final Logger log = Logger.getLogger(AdminLoginServiceImpl.class); 

	@Autowired
	private AdminLoginServiceHelper adminLoginServiceHelper;
	
	
	/**
	 * This method returns list of roles for a given user name
	 */
	public List<String> getRole(String username) {
		return adminLoginServiceHelper.getRole(username);
	}
	
	/**
	 * This method returns list of permissions for a given user name
	 */
	public List<String> getRolePermissions(String username) {
		return adminLoginServiceHelper.getRolePermissions(username);
	}
	
	/**
	 * Once login is successful this method resets the counter
	 * @param username
	 */
	public void successfulLogin(String username) {
		adminLoginServiceHelper.successfulLogin(username);
	}
	
	/**
	 * Once login is successful this method resets the counter
	 * @param username
	 */
	public void unsuccessfulLogin(String username) {
		adminLoginServiceHelper.unsuccessfulLogin(username);
	}
	
	
	/**
	 * Once login is successful this method will set OTP
	 * @param username
	 */
	public void setOTP(String username) {
		adminLoginServiceHelper.setOTP(username);
	}
	
	/**
	 * Once login is successful this method will validate entered OTP
	 * @param username
	 */
	public boolean isOTPMatched(String username, String otp) {
		return adminLoginServiceHelper.isOTPMatched(username, otp);
	}
	
	
	/**
	 * OTP will be resent based on the maximum threshold value subscribed by the branch. 
	 * If it reaches threshold value then it will return false.
	 * @param username
	 */
	public boolean resendOTP(String username) {
		return adminLoginServiceHelper.resendOTP(username);
	}
	
	/**
	 * Once user is logged in then expire the OTP
	 * @param username
	 */
	public void expireOTP(String username) {
		adminLoginServiceHelper.expireOTP(username);
	}
	/**
	 * This method decides if single step login/otp based/security based question is subscribed for the branch 
	 * @param username
	 */
	public String checkOTPOrSecurityQuestion(String username) throws SecurityQuestionNotSetException {
		return adminLoginServiceHelper.checkOTPOrSecurityQuestion(username);
	}
	
	/**
	 * Once login is successful this method will validate entered Security questions
	 * @param username
	 */
	public boolean isSecurityQuestionMatched(String username, List<SecurityQnA> securityQnAList) {
		return adminLoginServiceHelper.isSecurityQuestionMatched(username, securityQnAList);
	}
	
	/**
	 * Once login is successful this method will get random question from the questions have been set
	 * @param username
	 */
	public List<SecurityQnA> getRandomSecurityQuestion(String username) {
		return adminLoginServiceHelper.getRandomSecurityQuestion(username);
	}
	
	/**
	 * This method checks if the account is locked
	 * @param username
	 */
	public boolean isAccountLocked(String username) {
		return adminLoginServiceHelper.isAccountLocked(username);
	}
	
	/**
	 * This method verifies if the user is authenticated user
	 * @param username
	 */
	public boolean isUserAuthenticated(String username, String password) {
		return adminLoginServiceHelper.isUserAuthenticated(username, password);
	}
}
