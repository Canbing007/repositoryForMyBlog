package com.org.test.coop.master.junit;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;

import org.apache.log4j.Logger;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.ContextHierarchy;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.org.coop.bs.config.DozerConfig;
import com.org.coop.bs.util.AdminSvcCommonUtil;
import com.org.coop.canonical.beans.RetailCustomerMasterBean;
import com.org.coop.canonical.beans.RetailRateChartBean;
import com.org.coop.canonical.beans.RetailVendorBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.config.RetailDozerConfig;
import com.org.coop.retail.entities.RetailRateChart;
import com.org.coop.retail.repositories.RetailRateChartRepository;
import com.org.coop.society.data.transaction.config.DataAppConfig;
import com.org.test.coop.junit.JunitTestUtil;
import com.org.test.coop.society.data.transaction.config.TestDataAppConfig;

@RunWith(SpringJUnit4ClassRunner.class)
@ComponentScan(basePackages = "com.org.test.coop")
@EnableAutoConfiguration(exclude = { DataAppConfig.class, DozerConfig.class})
@ContextHierarchy({
	  @ContextConfiguration(classes={TestDataAppConfig.class, RetailDozerConfig.class})
})
@WebAppConfiguration
public class RetailCustomerSetupWSTest {
	private static final Logger logger = Logger.getLogger(RetailCustomerSetupWSTest.class);
	
	private MockMvc mockMvc;
	@Autowired
	private WebApplicationContext wac;
	
	@Autowired
	private RetailRateChartRepository retailRateChartRepository;
	
	@Autowired
	private AdminSvcCommonUtil adminSvcCommonUtil;
	
	private String addRetailCustomerJson = null;
	private String updateRetailCustomerJson = null;
	private String addAnotherRetailCustomerJson = null;
	
	private ObjectMapper om = null;
	
	@Before
	public void runBefore() throws Exception {
		try {
			this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();

			DateFormat df = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			om = new ObjectMapper();
			om.setSerializationInclusion(Include.NON_NULL);
			om.setDateFormat(df);
			addRetailCustomerJson = JunitTestUtil.getFileContent("inputJson/retail/branch/addRetailCustomer.json");
			addAnotherRetailCustomerJson = JunitTestUtil.getFileContent("inputJson/retail/branch/addAnotherRetailCustomer.json");
			updateRetailCustomerJson = JunitTestUtil.getFileContent("inputJson/retail/branch/updateRetailCustomer.json");
			
		} catch (Exception e) {
			logger.error("Error while initializing: ", e);
			throw e;
		}
	}
	@Test
	public void testRetailCustomer() {
		addRetailCustomer();
		addAnotherRetailCustomer();
		updateRetailCustomer();
		getRetailCustomersByBranchId();
		getRetailCustomersByCustomerId();
	}

	private void addRetailCustomer() {
		try {
			assertNotNull(addRetailCustomerJson);
			MvcResult result = this.mockMvc.perform(post("/rest/saveRetailCustomer")
				 .contentType("application/json").header("Authorization", "Basic " + Base64.getEncoder().encodeToString("ashish:ashish".getBytes()))
				 .content(addRetailCustomerJson)
				).andExpect(status().isOk())
				.andExpect(content().contentType("application/json"))
				.andReturn();
			
			UIModel uiModel = getUIModel(result, "outputJson/retail/branch/addRetailCustomer.json");
			
			assertNull(uiModel.getErrorMsg());
			RetailCustomerMasterBean retailCustomerBean = uiModel.getBranchBean().getRetailCustomers().get(0);
			assertEquals(1, retailCustomerBean.getCustomerId());
			assertEquals(2, retailCustomerBean.getBranchId());
			assertEquals(0, retailCustomerBean.getRefCustomerId());
			assertEquals("Running", retailCustomerBean.getCustomerType());
			assertEquals("Ashish Mondal", retailCustomerBean.getCustomerName());
			assertEquals("Kalipur", retailCustomerBean.getAddressLine1());
			assertEquals("712708", retailCustomerBean.getPin());
			assertEquals("9830525559", retailCustomerBean.getPhone1());
			assertEquals("ashish", retailCustomerBean.getCreateUser());
			assertNotNull(retailCustomerBean.getCreateDate());
		} catch(Exception e) {
			logger.error("Error while adding retail customer", e);
		}
	}
	
	private void addAnotherRetailCustomer() {
		try {
			assertNotNull(addAnotherRetailCustomerJson);
			MvcResult result = this.mockMvc.perform(post("/rest/saveRetailCustomer")
				 .contentType("application/json").header("Authorization", "Basic " + Base64.getEncoder().encodeToString("ashish:ashish".getBytes()))
				 .content(addAnotherRetailCustomerJson)
				).andExpect(status().isOk())
				.andExpect(content().contentType("application/json"))
				.andReturn();
			
			UIModel uiModel = getUIModel(result, "outputJson/retail/branch/addAnotherRetailCustomer.json");
			
			assertNull(uiModel.getErrorMsg());
			RetailCustomerMasterBean retailCustomerBean = uiModel.getBranchBean().getRetailCustomers().get(0);
			assertEquals(2, retailCustomerBean.getCustomerId());
			assertEquals(2, retailCustomerBean.getBranchId());
			assertEquals(100, retailCustomerBean.getRefCustomerId());
			assertEquals("Member", retailCustomerBean.getCustomerType());
			assertEquals("Dona Mondal", retailCustomerBean.getCustomerName());
			assertEquals("Kalipur", retailCustomerBean.getAddressLine1());
			assertEquals("712708", retailCustomerBean.getPin());
			assertEquals("9830625559", retailCustomerBean.getPhone1());
			assertEquals("ashish", retailCustomerBean.getCreateUser());
			assertNotNull(retailCustomerBean.getCreateDate());
		} catch(Exception e) {
			logger.error("Error while adding retail customer", e);
		}
	}
	
	private void updateRetailCustomer() {
		try {
			assertNotNull(updateRetailCustomerJson);
			MvcResult result = this.mockMvc.perform(post("/rest/saveRetailCustomer")
				 .contentType("application/json").header("Authorization", "Basic " + Base64.getEncoder().encodeToString("ashish:ashish".getBytes()))
				 .content(updateRetailCustomerJson)
				).andExpect(status().isOk())
				.andExpect(content().contentType("application/json"))
				.andReturn();
			
			UIModel uiModel = getUIModel(result, "outputJson/retail/branch/updateRetailCustomer.json");
			
			assertNull(uiModel.getErrorMsg());
			RetailCustomerMasterBean retailCustomerBean = uiModel.getBranchBean().getRetailCustomers().get(0);
			assertEquals(1, retailCustomerBean.getCustomerId());
			assertEquals(2, retailCustomerBean.getBranchId());
			assertEquals(0, retailCustomerBean.getRefCustomerId());
			assertEquals("Running", retailCustomerBean.getCustomerType());
			assertEquals("Ashish Mondal", retailCustomerBean.getCustomerName());
			assertEquals("Kalipur", retailCustomerBean.getAddressLine1());
			assertEquals("712708", retailCustomerBean.getPin());
			assertEquals("9830625559", retailCustomerBean.getPhone1());
			assertEquals("ashish", retailCustomerBean.getCreateUser());
			assertEquals("ashish", retailCustomerBean.getUpdateUser());
			assertNotNull(retailCustomerBean.getCreateDate());
		} catch(Exception e) {
			logger.error("Error while adding retail customer", e);
		}
	}
	
	private void getRetailCustomersByCustomerId() {
		try {
			MvcResult result = this.mockMvc.perform(get("/rest/getRetailCustomer?customerId=1")
					 .contentType("application/json").header("Authorization", "Basic " + Base64.getEncoder().encodeToString("ashish:ashish".getBytes()))
					).andExpect(status().isOk())
					.andExpect(content().contentType("application/json"))
					.andReturn();
				
			UIModel uiModel = getUIModel(result, "outputJson/retail/branch/getRetailCustomersByCustomerId.json");
			
			assertNull(uiModel.getErrorMsg());
			RetailCustomerMasterBean retailCustomerBean = uiModel.getBranchBean().getRetailCustomers().get(0);
			assertEquals(1, retailCustomerBean.getCustomerId());
			assertEquals(2, retailCustomerBean.getBranchId());
			assertEquals(0, retailCustomerBean.getRefCustomerId());
			assertEquals("Running", retailCustomerBean.getCustomerType());
			assertEquals("Ashish Mondal", retailCustomerBean.getCustomerName());
			assertEquals("Kalipur", retailCustomerBean.getAddressLine1());
			assertEquals("712708", retailCustomerBean.getPin());
			assertEquals("9830625559", retailCustomerBean.getPhone1());
			assertEquals("ashish", retailCustomerBean.getCreateUser());
			assertEquals("ashish", retailCustomerBean.getUpdateUser());
			assertNotNull(retailCustomerBean.getCreateDate());
		} catch(Exception e) {
			logger.error("Error while retrieving customer for a given branch", e);
		}
	}
	
	private void getRetailCustomersByBranchId() {
		try {
			MvcResult result = this.mockMvc.perform(get("/rest/getRetailCustomer?branchId=2")
					 .contentType("application/json").header("Authorization", "Basic " + Base64.getEncoder().encodeToString("ashish:ashish".getBytes()))
					).andExpect(status().isOk())
					.andExpect(content().contentType("application/json"))
					.andReturn();
				
			UIModel uiModel = getUIModel(result, "outputJson/retail/branch/getRetailCustomersByBranchId.json");
			
			assertNull(uiModel.getErrorMsg());
			for(RetailCustomerMasterBean retailCustomerBean : uiModel.getBranchBean().getRetailCustomers() ) {
				if(retailCustomerBean.getCustomerId() == 1) {
					assertEquals(1, retailCustomerBean.getCustomerId());
					assertEquals(2, retailCustomerBean.getBranchId());
					assertEquals(0, retailCustomerBean.getRefCustomerId());
					assertEquals("Running", retailCustomerBean.getCustomerType());
					assertEquals("Ashish Mondal", retailCustomerBean.getCustomerName());
					assertEquals("Kalipur", retailCustomerBean.getAddressLine1());
					assertEquals("712708", retailCustomerBean.getPin());
					assertEquals("9830625559", retailCustomerBean.getPhone1());
					assertEquals("ashish", retailCustomerBean.getCreateUser());
					assertEquals("ashish", retailCustomerBean.getUpdateUser());
					assertNotNull(retailCustomerBean.getCreateDate());
				}
			}
		} catch(Exception e) {
			logger.error("Error while retrieving customer for a given branch", e);
		}
	}
	private UIModel getUIModel(MvcResult result)
			throws UnsupportedEncodingException, IOException,
			JsonParseException, JsonMappingException {
		String json = result.getResponse().getContentAsString();
		UIModel createBranchBean = om.readValue(json, UIModel.class);
		return createBranchBean;
	}
	
	private UIModel getUIModel(MvcResult result, String path)
			throws UnsupportedEncodingException, IOException,
			JsonParseException, JsonMappingException {
		UIModel createBranchBean = getUIModel(result);
		JunitTestUtil.writeJSONToFile(createBranchBean, path);
		return createBranchBean;
	}
	
}
