<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"

	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/aop
  	http://www.springframework.org/schema/aop/spring-aop.xsd
  	http://www.springframework.org/schema/jdbc 
  	http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
  	http://www.springframework.org/schema/tx
  	http://www.springframework.org/schema/tx/spring-tx.xsd"
	default-init-method="init" default-destroy-method="destroy">

	<!-- For component scan xmlns:context and below two URLs have been added 
		in xsi:schemaLocation -->
	<!-- http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd -->
	<context:component-scan base-package="com.ashish" />


	<!-- This element is required for enabling Spring AOP support -->
	<aop:aspectj-autoproxy />

	<bean id="helloWorld1" class="com.ashish.learning.HelloWorld">
	</bean>

	<bean id="helloWorld11" class="com.ashish.learning.HelloWorld">
	</bean>

	<!-- As the scope is prototype so only init method will get called but destroy 
		method will not get called init() method in the beans having prototype scope 
		gets caled as soon as they initialize but beans in singleton scope gets called 
		as soon as the spring context gets loaded unless lazy-init="true" defined 
		against a bean -->

	<bean id="helloWorld2" class="com.ashish.learning.HelloWorld"
		scope="prototype">
	</bean>

	<!-- Spring lifecycle example -->
	<!-- If you want to execute init and destroy method for every bean initialization 
		then you should declare at the beans level as shown above If you want to 
		call init method and destroy method the you need to declare at the this level 
		as shown below -->
	<bean id="helloWorldInitDestroy" class="com.ashish.learning.HelloWorld"
		init-method="init" destroy-method="destroy" lazy-init="true">
	</bean>

	<!-- This ensures the bean post processor will gets called every time beans 
		gets instantiated Please check the implementation of the class -->
	<bean class="com.ashish.learning.BeanPostProcessorImpl">
	</bean>

	<!-- Another bean post processor has been added. Order of the call will 
		be controlled by implementing org.springframework.core.Ordered interface 
		Check the implementation of this bean post processor. Lower the order value 
		has the higher priority -->
	<bean class="com.ashish.learning.BeanPostProcessor2Impl">
	</bean>




	<!-- Constructor based dependancy injection -->
	<bean id="showRoom" class="com.ashish.learning.ShowRoom">
		<constructor-arg ref="fourWheelers"></constructor-arg>
	</bean>

	<bean id="fourWheelers" class="com.ashish.learning.BMWCar"></bean>


	<!-- Setter based dependancy injection -->
	<bean id="showRoomSetter" class="com.ashish.learning.ShowRoom">
		<property name="fourWheelers" ref="fourWheelersSetter"></property>
	</bean>

	<bean id="fourWheelersSetter" class="com.ashish.learning.BMWCar"></bean>


	<!-- dependancy injection using p-namespace -->
	<!-- Look at the begning of the file p namespace is added -->
	<bean id="showRoomPNameSpace" class="com.ashish.learning.ShowRoom"
		p:fourWheelers-ref="fourWheelersSetter" p:greetings="Another way to declare p-namespace">
	</bean>


	<!-- Injecing collections -->
	<bean id="showRoomCollections" class="com.ashish.learning.ShowRoom">
		<property name="cars">
			<list>
				<value>Tata</value>
				<value>Toyota</value>
				<value>Suzuki</value>
			</list>
		</property>
		<property name="carsMap">
			<map>
				<entry key="K1" value="1" />
				<entry key="K2" value-ref="fourWheelersSetter" />
				<entry key="K3">
					<bean class="com.ashish.learning.SomeInnerBean">
						<property name="name" value="Ashish" />
						<property name="address" value="Atlanta, USA" />
					</bean>
				</entry>
			</map>
		</property>
	</bean>



	<!-- Autowiring by Name -->
	<bean name="manufacturerByName" class="com.ashish.learning.autowire.PhoneManufacturer"
		autowire="byName"></bean>
	<bean name="phone" class="com.ashish.learning.autowire.Nokia"></bean>

	<!-- Autowiring by Type -->
	<bean name="manufacturerByType" class="com.ashish.learning.autowire.PhoneManufacturer">
	</bean>
	<bean name="phone1" class="com.ashish.learning.autowire.Samsung"></bean>


	<!-- Property Place holder configurer reads data from properties file and 
		the values are used within the applicaion context or inside the code -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>database.properties</value>
		</property>
	</bean>

	<!-- The values are read from database.properties file -->
	<!-- Data source for mysql -->
	<bean name="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Data source for h2db -->
	<bean name="dataSourceH2db"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="driverClassName" value="${h2db.driver}" />
		<property name="url" value="${h2db.inmemory.url}" />
		<property name="username" value="${h2db.user}" />
		<property name="password" value="${h2db.password}" />
	</bean>

	<jdbc:initialize-database data-source="dataSourceH2db"
		ignore-failures="DROPS">
		<jdbc:script location="create-db.sql" />
	</jdbc:initialize-database>

	<!-- Enable Annotation based Declarative Transaction Management -->
	<tx:annotation-driven proxy-target-class="true"
		transaction-manager="transactionManager" />

	<!-- Creating TransactionManager Bean, since JDBC we are creating of type 
		DataSourceTransactionManager -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceH2db" />
	</bean>

	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSourceH2db" />
	</bean>

	<!-- ResourceBundleMessageSource to read values from properties file. This 
		is mainly used in internationalization (i18n) implementation -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages/message</value> <!-- No need to specify .properties extension -->
			</list>
		</property>
	</bean>
</beans>
