package com.org.coop.retail.servicehelper;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.RetailCustomerMasterBean;
import com.org.coop.canonical.beans.RetailVendorBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.RetailCustomerMappingImpl;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.RetailCustomerMaster;
import com.org.coop.retail.entities.VendorMaster;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.repositories.RetailCustomerMasterRepository;

@Service
public class RetailCustomerSetupServiceHelperImpl {

	private static final Logger log = Logger.getLogger(RetailCustomerSetupServiceHelperImpl.class); 
	
	@Autowired
	private RetailBranchMasterRepository branchMasterRepository;
	
	@Autowired
	private RetailCustomerMappingImpl retailCustomerMappingImpl;
	
	@Autowired
	private RetailCustomerMasterRepository retailCustomerMasterRepository;
	
	@Transactional(value="retailTransactionManager", propagation=Propagation.REQUIRED)
	public UIModel getRetailCustomer(int customerId, int branchId) {
		UIModel uiModel = new UIModel();
		RetailCustomerMaster customer = null;
		BranchMaster branch = null;
		// Check if the Customer already exists
		if(customerId > 0) {
			customer = retailCustomerMasterRepository.findOne(customerId);
			if(customer == null) {
				uiModel.setErrorMsg("Customer does not exist for customer Id: " + customerId);
				return uiModel;
			}
			
			BranchBean branchBean = new BranchBean();
			RetailCustomerMasterBean customerBean = new RetailCustomerMasterBean();
			List<RetailCustomerMasterBean> customerBeanList = new ArrayList<RetailCustomerMasterBean>();
			customerBeanList.add(customerBean);
			branchBean.setRetailCustomers(customerBeanList);
			
			retailCustomerMappingImpl.mapBean(customer, customerBean);
			uiModel.setBranchBean(branchBean);
			branchBean.setBranchId(customer.getBranchMaster().getBranchId());
			
		} else if(branchId > 0){
			branch = branchMasterRepository.findOne(branchId);
			if(branch == null) {
				uiModel.setErrorMsg("Branch does not exist for branch Id: " + branchId);
				return uiModel;
			}
			BranchBean branchBean = new BranchBean();
			retailCustomerMappingImpl.mapBranchBean(branch, branchBean);
			uiModel.setBranchBean(branchBean);
		}
		
		
		if(log.isDebugEnabled()) {
			log.debug("Customer details has been retrieved from database for customerId: " + customerId);
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager", readOnly=false, propagation=Propagation.REQUIRED)
	public UIModel saveRetailCustomer(UIModel uiModel) {
		if(uiModel.getBranchBean().getRetailCustomers() != null && uiModel.getBranchBean().getRetailCustomers().size() > 0 ) {
			RetailCustomerMasterBean customerBean = uiModel.getBranchBean().getRetailCustomers().get(0);
			int customerId = customerBean.getCustomerId();
			RetailCustomerMaster customer = null;
			if(customerId == 0) {
				customer = new RetailCustomerMaster();
				BranchMaster branchMaster = branchMasterRepository.findOne(customerBean.getBranchId());
				if(branchMaster == null) {
					log.debug("Branch does not exist for branch Id: " + customerBean.getBranchId());
					uiModel.setErrorMsg("Branch does not exists in our record. Please pass branch id correctly.");
					return uiModel;
				}
				customer.setBranchMaster(branchMaster);
				if(log.isDebugEnabled()) {
					log.debug("Adding new customer");
				}
			} else {
				customer = retailCustomerMasterRepository.findOne(customerId);
				if(log.isDebugEnabled()) {
					log.debug("Modifying existing Customer for customerId = " + customerId);
				}
			}
			
			retailCustomerMappingImpl.mapBean(customerBean, customer);
			retailCustomerMasterRepository.saveAndFlush(customer);
			customerBean.setCustomerId(customer.getCustomerId());
		} else {
			uiModel.setErrorMsg("Customer details not passed correctly");
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteRetailCustomer(UIModel uiModel) {
		if(uiModel.getBranchBean().getRetailCustomers() != null && uiModel.getBranchBean().getRetailCustomers().size() > 0 ) {
			RetailCustomerMasterBean retailCustomerBean = uiModel.getBranchBean().getRetailCustomers().get(0);
			int customerId = retailCustomerBean.getCustomerId();
			RetailCustomerMaster retailCustomer = retailCustomerMasterRepository.findOne(customerId);
			if(retailCustomer == null) {
				log.error("Customer does not exists for customerId: " + customerId);
				uiModel.setErrorMsg("Customer does not exists for customerId: " + customerId);
				return uiModel;
			}
			
			try {
				if(retailCustomerMasterRepository.checkIfAnyChildRecordExists(customerId) > 0) {
					log.error("Vendor is in use for customerId = " + customerId);
					uiModel.setErrorMsg("Vendor is in use for customerId = " + customerId);
					return uiModel;
				} else {
					retailCustomerMappingImpl.mapBean(retailCustomerBean, retailCustomer);
					retailCustomerMasterRepository.saveAndFlush(retailCustomer);
					retailCustomerMasterRepository.delete(retailCustomer);
				}
			} catch (Exception e) {
				log.error("Unable to delete customer for customerId = " + customerId);
				uiModel.setErrorMsg("Unable to delete customer for customerId = " + customerId);
				return uiModel;
			}
			if(log.isDebugEnabled()) {
				log.debug("Customer deleted for customerId = " + customerId);
			}
		} else {
			uiModel.setErrorMsg("Customer can not be deleted because the details has not passed correctly");
		}
		return uiModel;
	}
}
