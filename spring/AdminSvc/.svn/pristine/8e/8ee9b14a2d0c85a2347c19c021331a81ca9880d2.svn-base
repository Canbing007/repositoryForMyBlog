package com.org.coop.admin.servicehelper;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.coop.org.exception.SecurityQuestionNotSetException;
import com.org.coop.bs.mapper.BranchMappingImpl;
import com.org.coop.bs.util.BusinessConstants;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.SecurityQnA;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.society.data.admin.entities.BranchMaster;
import com.org.coop.society.data.admin.entities.RolePermission;
import com.org.coop.society.data.admin.entities.User;
import com.org.coop.society.data.admin.entities.UserRole;
import com.org.coop.society.data.admin.entities.UserSecurityQuestion;
import com.org.coop.society.data.admin.repositories.BranchMasterRepository;
import com.org.coop.society.data.admin.repositories.UserAdminRepository;

@Service
public class AdminLoginServiceHelperImpl implements AdminLoginServiceHelper {
	private static final Logger log = Logger.getLogger(AdminLoginServiceHelperImpl.class); 

	@Autowired
	private UserAdminRepository userAdminRepository;
	
	@Autowired
	private CommonAdminServiceHelperImpl commonAdminServiceHelperImpl;
	
	@Autowired
	private BranchMasterRepository branchMasterRepository;
	
	@Autowired
	private BranchMappingImpl branchMappingImpl;
	
	/**
	 * This method returns list of roles for a given user name
	 */
	@Transactional(value="adminTransactionManager")
	public List<String> getRole(String username) {
		List<String> roleList = new ArrayList<String>();
		User user = userAdminRepository.findByUserName(username);
		if(user != null) {
			for(UserRole userRole : user.getUserRoles()) {
				roleList.add(userRole.getRoleMaster().getRoleName().toUpperCase());
			}
		}
		return roleList;
	}
	
	/**
	 * This method returns list of permissions for a given user name
	 */
	@Transactional(value="adminTransactionManager")
	public List<String> getRolePermissions(String username) {
		List<String> permissionList = new ArrayList<String>();
		User user = userAdminRepository.findByUserName(username);
		if(user != null) {
			for(UserRole userRole : user.getUserRoles()) {
				for(RolePermission rolePerm : userRole.getRoleMaster().getRolePermissions()) {
					String permission = rolePerm.getPermissionMaster().getModuleMaster().getModuleName() + "_" + rolePerm.getPermissionMaster().getPermission();
					permissionList.add(permission);
				}
			}
		}
		return permissionList;
	}
	
	/**
	 * Once login is successful this method resets the counter
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public void successfulLogin(String username) {
		if(username != null) {
			User user = userAdminRepository.findByUserName(username);
			user.getUserCredential().setUnsuccessfulLoginCount(0);
			user.getUserCredential().setLastLogin(new Timestamp(System.currentTimeMillis()));
			user.getUserCredential().setUpdateUser(username);
		}
	}
	
	/**
	 * Once login is successful this method resets the counter
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public void unsuccessfulLogin(String username) {
		if(username != null) {
			User user = userAdminRepository.findByUserName(username);
			int unsuccessfulLoginCounter = user.getUserCredential().getUnsuccessfulLoginCount();
			user.getUserCredential().setUnsuccessfulLoginCount(++unsuccessfulLoginCounter);
			user.getUserCredential().setLastUnsuccessfulLogin(new Timestamp(System.currentTimeMillis()));
			user.getUserCredential().setUpdateUser(username);
			user.getUserCredential().setSuccessfulLogin(0);
		}
	}
	
	
	/**
	 * Once login is successful this method will set OTP
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public void setOTP(String username) {
		User user = userAdminRepository.findByUserName(username);
		long expTime = user.getUserCredentialOtp().getEndDate().getTime();
		long currentTime = System.currentTimeMillis();
		
		if(currentTime - expTime < 0) {
			log.debug("OTP has been generated within : " + BusinessConstants.OTP_VALIDITY + " ms for user: " + username);
			return;
		}
		
		Random rnd = new Random();
		int otp = 100000 + rnd.nextInt(900000);
		user.getUserCredentialOtp().setOtp(String.valueOf(otp));
		user.getUserCredentialOtp().setStartDate(new Timestamp(System.currentTimeMillis()));
		user.getUserCredentialOtp().setEndDate(new Timestamp(System.currentTimeMillis() + (BusinessConstants.OTP_VALIDITY)));
	}
	
	/**
	 * Once login is successful this method will validate entered OTP
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public boolean isOTPMatched(String username, String otp) {
		User user = userAdminRepository.findByUserName(username);
		long expTime = user.getUserCredentialOtp().getEndDate().getTime();
		long currentTime = System.currentTimeMillis();
		
		if(currentTime - expTime > 0) {
			log.debug("OTP has expired for user: " + username);
			return false;
		}
		if(otp != null && user.getUserCredentialOtp().getOtp().equals(otp)) {
			user.getUserCredential().setUnsuccessfulLoginCount(0);
			user.getUserCredential().setSuccessfulLogin(1);
			log.debug("OTP has matched for user: " + username);
			return true;
		} else {
			unsuccessfulLogin(username);
			log.debug("OTP does not for user: " + username);
			return false;
		}
	}
	
	
	/**
	 * OTP will be resent based on the maximum threshold value subscribed by the branch. 
	 * If it reaches threshold value then it will return false.
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public boolean resendOTP(String username) {
		User user = userAdminRepository.findByUserName(username);
		int noOfTimesOtpToBeResend = BusinessConstants.NUMBER_OF_TIMES_OTP_TO_BE_RESEND_VAL;
		
		String ruleVal = commonAdminServiceHelperImpl.getBranchRuleValueByKey(username, BusinessConstants.RULE_NUMBER_OF_TIMES_OTP_TO_BE_RESEND);
		noOfTimesOtpToBeResend = Integer.valueOf(ruleVal);
		
		int otpResendCounter = user.getUserCredentialOtp().getOtpResendCounter();
		if(otpResendCounter < noOfTimesOtpToBeResend) {
			user.getUserCredentialOtp().setOtpResendCounter(++otpResendCounter);
			return true;
		} else {
			user.getUserCredentialOtp().setOtpResendCounter(0);
		}
		return false;
	}
	
	/**
	 * Once user is logged in then expire the OTP
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public void expireOTP(String username) {
		User user = userAdminRepository.findByUserName(username);
		user.getUserCredentialOtp().setEndDate(new Timestamp(System.currentTimeMillis()));
		log.debug("Expired the OTP for user: " + username);
	}
	/**
	 * This method decides if single step login/otp based/security based question is subscribed for the branch 
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public String checkOTPOrSecurityQuestion(String username) throws SecurityQuestionNotSetException {
		String loginOption = commonAdminServiceHelperImpl.getBranchRuleValueByKey(username, BusinessConstants.RULE_LOGIN_OPTION);
		log.debug("Login option: " + loginOption);
		
		if(BusinessConstants.RULE_LOGIN_OPTION_ENUM.OTP_BASED_LOGIN.name().equals(loginOption)) {
			setOTP(username);
		} else if(BusinessConstants.RULE_LOGIN_OPTION_ENUM.SECURITY_QUESTION_BASED_LOGIN.name().equals(loginOption)) {
			// Check if security question is set for the user.
			User user = userAdminRepository.findByUserName(username);
			List<UserSecurityQuestion> userSecQues = user.getUserSecurityQuestions();
			if(userSecQues == null || userSecQues.size() == 0) {
				log.debug("Security question is not set for the user : " + username);
				throw new SecurityQuestionNotSetException("Security question is not set for the user : " + username);
			}
		}
		return loginOption;
	}
	
	/**
	 * Once login is successful this method will validate entered Security questions
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public boolean isSecurityQuestionMatched(String username, List<SecurityQnA> securityQnAList) {
		if(securityQnAList == null || securityQnAList.size() == 0) {
			log.debug("User has not answered any of the security questions");
			return false;
		}
		Map<String, String> qnaMap = new HashMap<String, String>();
		for(SecurityQnA securityQnA : securityQnAList) {
			qnaMap.put(securityQnA.getQuestion(), securityQnA.getAnswer());
		}
		User user = userAdminRepository.findByUserName(username);
		List<UserSecurityQuestion> userSecQues = user.getUserSecurityQuestions();
		boolean isUserAnswerAvailable = false;
		if(userSecQues != null && userSecQues.size() > 0 ) {
			for(UserSecurityQuestion secQues : userSecQues) {
				String ques = secQues.getSecurityQuestion().getQuestion();
				String dbAnswer = secQues.getAnswer();
				String userAnswer = qnaMap.get(ques);
				if(!StringUtils.isBlank(userAnswer)) {
					isUserAnswerAvailable = true;
				}
				
				if(dbAnswer.equals(userAnswer)) {
					user.getUserCredential().setUnsuccessfulLoginCount(0);
					user.getUserCredential().setSuccessfulLogin(1);
					log.debug("User answer matches");
					return true;
				}
			}
		}
		if(isUserAnswerAvailable) {
			unsuccessfulLogin(username);
		}
		return false;
	}
	
	/**
	 * Once login is successful this method will get random question from the questions have been set
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public List<SecurityQnA> getRandomSecurityQuestion(String username) {
		List<SecurityQnA> securityQuesAnswerList = new ArrayList<SecurityQnA>();
		User user = userAdminRepository.findByUserName(username);
		List<UserSecurityQuestion> userSecQues = user.getUserSecurityQuestions();
		if(userSecQues != null && userSecQues.size() > 0) {
			Random rnd = new Random();
			int randomNum = 100 + rnd.nextInt(900);
			randomNum = randomNum % userSecQues.size();
			UserSecurityQuestion secQues = userSecQues.get(randomNum);
			SecurityQnA securityQnA = new SecurityQnA();
			securityQuesAnswerList.add(securityQnA);
			securityQnA.setQuestion(secQues.getSecurityQuestion().getQuestion());
			securityQnA.setAnswer(secQues.getAnswer());
		}
		return securityQuesAnswerList;
	}
	
	/**
	 * This method checks if the account is locked
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public boolean isAccountLocked(String username) {
		User user = userAdminRepository.findByUserName(username);
		String ruleVal = commonAdminServiceHelperImpl.getBranchRuleValueByKey(username, BusinessConstants.RULE_LOCK_AFTER_NO_OF_ATTEMPTS);
		int lockAfterWrongAttempt = BusinessConstants.RULE_LOCK_AFTER_NO_OF_ATTEMPTS_VAL;
		
		try {
			lockAfterWrongAttempt = Integer.parseInt(ruleVal);
		} catch (Exception e) {
			log.error("User lock rule is not set for user: " + username);
			lockAfterWrongAttempt = BusinessConstants.RULE_LOCK_AFTER_NO_OF_ATTEMPTS_VAL;
		}
		if(user.getUserCredential().getUnsuccessfulLoginCount() >= lockAfterWrongAttempt ) {
			log.debug("Account is locked:");
			return true;
		}
		return false;
	}
	
	/**
	 * This method verifies if the user is authenticated user
	 * @param username
	 */
	@Transactional(value="adminTransactionManager")
	public boolean isUserAuthenticated(String username, String password) {
		if(username == null || password == null) {
			log.debug("Username or password is null: " + username);
			return false;
		}
		User user = userAdminRepository.findByUserName(username);
		if(user == null) {
			log.debug("User name doesn't exist in our record: " + username);
			return false;
		}
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		if(passwordEncoder.matches(password, user.getUserCredential().getPassword())) {
			log.debug("User is authenticated: " + username);
			return true;
		}
		return false;
	}
	
	@Transactional(value="adminTransactionManager")
	public UIModel getBranchConfig(String username) {
		UIModel uiModel = new UIModel();

		User user = userAdminRepository.findByUserName(username);
		if(user == null) {
			uiModel.setErrorMsg("User, " + username + " does not exists in the database");
			return uiModel;
		}
		int branchId = user.getBranchMaster().getBranchId();
		
		BranchMaster branch = branchMasterRepository.findOne(branchId);
		if(branch == null) {
			uiModel.setErrorMsg("Branch does not exist for Branch Id: " + branchId);
			return uiModel;
		}
		
		BranchBean branchBean = new BranchBean();
		branchMappingImpl.mapBean(branch, branchBean);
		
		uiModel.setBranchBean(branchBean);
		
		log.debug("Branch details has been retrieved from database for branchId: " + branchId);
		return uiModel;
	}
}
