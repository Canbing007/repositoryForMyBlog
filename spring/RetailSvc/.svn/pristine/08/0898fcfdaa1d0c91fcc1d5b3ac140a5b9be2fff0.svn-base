package com.org.coop.customer.ws;

import java.io.File;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;

import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.org.coop.canonical.beans.DocumentBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.service.RetailDocumentServiceImpl;

@RestController
@RequestMapping("/rest")
public class RetailDocumentWSImpl {
	
	private static final Logger log = Logger.getLogger(RetailDocumentWSImpl.class); 
	
	@Autowired
	private RetailDocumentServiceImpl retailDocumentServiceImpl;
	
	@RequestMapping(value = "/document", method = RequestMethod.GET, headers="Accept=application/json"/*,produces="application/json"*/)
	public void getDocumentByDocId(@RequestParam(value = "documentId",required = true,defaultValue = "0") Integer documentId,
								HttpServletResponse response) {
		UIModel uiModel = new UIModel();
		try {
			uiModel = retailDocumentServiceImpl.getDocumentByDocId(documentId);
			
			DocumentBean documentBean = uiModel.getBranchBean().getDocuments().get(0);
			
			response.setContentType("application/octet-stream");
			response.setHeader("Content-Disposition", String.format("inline; filename=\"" + documentBean.getTitle() + "." + documentBean.getDocType() + "\""));
			response.setContentLength(documentBean.getDocSize());
			FileCopyUtils.copy(documentBean.getDocument(), response.getOutputStream());
		} catch (Exception e) {
			log.error("Error Retrieving Document by document Id", e);
			uiModel.setErrorMsg("Error Retrieving Document by document Id: " + documentId);
		}
	}
	
	@RequestMapping(value = "/document", method = RequestMethod.POST, headers="Accept=application/json",produces="application/json",
							consumes = {"multipart/form-data", "application/json"})
	public UIModel saveDocument(@RequestParam("uiModel") String uiModelStr, @RequestPart("file") MultipartFile file) {
		UIModel uiModel = null;
		try {
			ObjectMapper om = new ObjectMapper();
			om.setSerializationInclusion(Include.NON_NULL);
	    	om.setSerializationInclusion(Include.NON_EMPTY);
	    	om.setDateFormat(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss"));
			uiModel = om.readValue(uiModelStr, UIModel.class);
			uiModel.getBranchBean().getDocuments().get(0).setDocument(file.getInputStream());
			uiModel.getBranchBean().getDocuments().get(0).setDocSize((int)file.getSize());
			uiModel = retailDocumentServiceImpl.saveDocument(uiModel);
		} catch (Exception e) {
			log.error("Error while creating branch by branch Id", e);
			uiModel = new UIModel();
			uiModel.setErrorMsg("Error while uploading document");
		}
		return uiModel;
	}
	
}
