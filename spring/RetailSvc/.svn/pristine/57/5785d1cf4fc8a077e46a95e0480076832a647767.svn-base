package com.org.coop.retail.servicehelper;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.org.coop.admin.service.BranchSetupServiceImpl;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.RetailVatRegNoBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.RetailBranchMappingImpl;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.VatRegNo;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.repositories.RetailVatRegNoRepository;

@Service
public class RetailBranchSetupServiceHelperImpl {

	private static final Logger log = Logger.getLogger(RetailBranchSetupServiceHelperImpl.class); 
	
	@Autowired
	private RetailBranchMasterRepository branchMasterRepository;
	
	@Autowired
	private RetailBranchMappingImpl retailBranchMappingImpl;
	
	@Autowired
	private BranchSetupServiceImpl branchSetupServiceImpl;
	
	@Autowired
	private RetailVatRegNoRepository retailVatRegNoRepository;
	
	@Transactional(value="retailTransactionManager")
	public UIModel getRetailBranch(int branchId) {
		UIModel uiModel = new UIModel();
		// Check if the branch already exists
		BranchMaster branch = branchMasterRepository.findOne(branchId);
		if(branch == null) {
			uiModel.setErrorMsg("Branch does not exist for Branch Id: " + branchId);
			return uiModel;
		}
		BranchBean branchBean = new BranchBean();
		retailBranchMappingImpl.mapBean(branch, branchBean);
		uiModel.setBranchBean(branchBean);
		
		log.debug("Branch details has been retrieved from database for branchId: " + branchId);
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel createRetailBranch(UIModel inputUiModel) {
		int branchId = inputUiModel.getBranchBean().getBranchId();
		// Check if the record exists in the master database
		UIModel uiModel = branchSetupServiceImpl.getBranch(branchId);
		if(uiModel.getErrorMsg() != null) {
			if(log.isDebugEnabled()) {
				log.debug("Error while retriving branch from master database");
			}
			return uiModel;
		}
		
		// Check if the branch already exists
		BranchMaster branch = branchMasterRepository.findOne(branchId);
		if(branch == null) {
			branch = new BranchMaster();
		}
		
		// Check if VAT registration number is sent
		if(inputUiModel.getBranchBean().getRetailVatRegNos() != null && inputUiModel.getBranchBean().getRetailVatRegNos().size() > 0) {
			uiModel.getBranchBean().addRetailVatRegNos(inputUiModel.getBranchBean().getRetailVatRegNos().get(0));
		}
		retailBranchMappingImpl.mapBean(uiModel.getBranchBean(), branch);
		
		if(inputUiModel.getBranchBean().getRetailVatRegNos() != null && inputUiModel.getBranchBean().getRetailVatRegNos().size() > 0) {
			for(VatRegNo vat : branch.getVatRegNos()) {
				vat.setBranchMaster(branch);
			}
		}
		
		branchMasterRepository.saveAndFlush(branch);
		
		log.debug("Branch details has been updated from the master database for branchId: " + branchId);
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteVatRegNo(UIModel uiModel) {
		
		if(uiModel.getBranchBean().getRetailVatRegNos() != null && uiModel.getBranchBean().getRetailVatRegNos().size() > 0) {
			RetailVatRegNoBean vatRegBean = uiModel.getBranchBean().getRetailVatRegNos().get(0);
			
			int vatId = vatRegBean.getVatId();
			
			if(vatId > 0) {
				VatRegNo vatRegNo = retailVatRegNoRepository.findOne(vatId);
				if(vatRegNo == null) {
					log.error("Incorrect VAT registration Id has been passed to delete the record");
					uiModel.setErrorMsg("Incorrect VAT registration Id has been passed to delete the record");
					return uiModel;
				}
				
				// update and delete record
				retailBranchMappingImpl.mapVatRegNoBean(vatRegBean, vatRegNo);
				retailVatRegNoRepository.saveAndFlush(vatRegNo);
				
				// soft delete the record now
				
				retailVatRegNoRepository.delete(vatId);
				if(log.isDebugEnabled()) {
					log.debug("VAT Registration deleted");
				}
			} else {
				log.error("VAT registration ID should not be 0 or negative");
				uiModel.setErrorMsg("VAT registration ID should not be 0 or negative");
				return uiModel;
			}
		} 
		return uiModel;
	}
}
