package com.org.coop.retail.servicehelper;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.org.coop.bs.util.AdminSvcCommonUtil;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.MaterialTranDtlBean;
import com.org.coop.canonical.beans.MaterialTranHrdBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.RetailStockEntryMappingImpl;
import com.org.coop.retail.bs.mapper.RetailStockReturnMappingImpl;
import com.org.coop.retail.bs.mapper.RetailTransactionMappingImpl;
import com.org.coop.retail.entities.FyClose;
import com.org.coop.retail.entities.MaterialTranDtl;
import com.org.coop.retail.entities.MaterialTranHrd;
import com.org.coop.retail.entities.StockEntry;
import com.org.coop.retail.repositories.FyCloseRepository;
import com.org.coop.retail.repositories.RetailMaterialTranDtlRepository;
import com.org.coop.retail.repositories.RetailMaterialTranHrdRepository;
import com.org.coop.retail.repositories.RetailStockEntryRepository;
import com.org.coop.retail.repositories.RetailStockReturnRepository;

@Service
public class RetailTransactionManagementServiceHelperImpl {

	private static final Logger log = Logger.getLogger(RetailTransactionManagementServiceHelperImpl.class); 
	
	@Autowired
	private RetailStockEntryRepository retailStockEntryRepository;
	
	@Autowired
	private FyCloseRepository fyCloseRepository;
	
	@Autowired
	private RetailStockEntryMappingImpl retailStockEntryMappingImpl;
	
	@Autowired
	private RetailStockReturnRepository retailStockReturnRepository;
	
	@Autowired
	private RetailStockReturnMappingImpl retailStockReturnMappingImpl;
	
	@Autowired
	private RetailMaterialTranHrdRepository retailMaterialTranHrdRepository;
	
	@Autowired
	private RetailMaterialTranDtlRepository retailMaterialTranDtlRepository;
	
	@Autowired
	private RetailTransactionMappingImpl retailTransactionMappingImpl;
	
	@Autowired
	private AdminSvcCommonUtil adminSvcCommonUtil;
	
	@Transactional(value="retailTransactionManager")
	public UIModel getStockTransaction(Integer branchId, Integer customerId, Integer tranId,
			String tranNo, Integer pageNo, Integer recordsPerPage, Date startDate, Date endDate) {
		UIModel uiModel = new UIModel();
		List<StockEntry> stocks = null;
		
		if(pageNo == 0) pageNo = 1;
		if(recordsPerPage == 0) recordsPerPage = 1000000;
		
		PageRequest pageRequest = new PageRequest(pageNo - 1, recordsPerPage, Sort.Direction.DESC, "entryDate");
		int recordCount = 0;
		if(tranId > 0) {
			MaterialTranHrd tranHrd = retailMaterialTranHrdRepository.findOne(tranId);
			
			if(tranHrd == null) {
				log.error("This invoice (invoiceId:) " + tranId + " does not exists in our record.");
				uiModel.setErrorMsg("This invoice (invoiceId:) " + tranId + " does not exists in our record.");
				return uiModel;
			}
			
			MaterialTranHrdBean tranHrdBean = new MaterialTranHrdBean();
			retailTransactionMappingImpl.mapMaterialTranHrdBean(tranHrd, tranHrdBean);
			
			uiModel.setBranchBean(new BranchBean());
			uiModel.getBranchBean().setBranchId(tranHrd.getBranchMaster().getBranchId());
			List<MaterialTranHrdBean> materialTranHrdBeans = new ArrayList<MaterialTranHrdBean>();
			materialTranHrdBeans.add(tranHrdBean);
			uiModel.getBranchBean().setMaterialTranHrds(materialTranHrdBeans);
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel saveStockTransaction(UIModel uiModel) {
		if(uiModel.getBranchBean().getMaterialTranHrds() != null && uiModel.getBranchBean().getMaterialTranHrds().size() > 0 ) {
			
			// Step 1: Save material transaction header after validation
			MaterialTranHrdBean tranHrdBean = uiModel.getBranchBean().getMaterialTranHrds().get(0);
			MaterialTranHrd tranHrd = null;
			if(tranHrdBean.getTranId() == 0) { // New bill
				tranHrd = new MaterialTranHrd();
			} else {
				tranHrd = retailMaterialTranHrdRepository.findOne(tranHrdBean.getTranId());
				
				if(tranHrd == null) {
					log.error("This invoice does not exists in ur record - invoice id: " + tranHrdBean.getTranId());
					uiModel.setErrorMsg("This invoice does not exists in ur record - invoice id: " + tranHrdBean.getTranId());
					return uiModel;
				}
			}
			
			List<StockEntry> stockEntries = new ArrayList<StockEntry>();
			uiModel = isValidBillEntry(uiModel, tranHrdBean, stockEntries);
			
			if(uiModel.getErrorMsg() != null && uiModel.getErrorMsg().trim().length() > 0) {
				return uiModel;
			}
			
			retailTransactionMappingImpl.mapMaterialTranHrdBean(tranHrdBean, tranHrd);
			tranHrd.setTranNo(retailMaterialTranHrdRepository.getTransactionNumber());
			
			// For the first time save, MaterialTranDtls should be set to null
			if(tranHrdBean.getTranId() == 0) {
				tranHrd.setMaterialTranDtls(null);
			}
			
			retailMaterialTranHrdRepository.saveAndFlush(tranHrd);
			
			tranHrdBean.setTranId(tranHrd.getTranId());
			
			BigDecimal billAmt = new BigDecimal(0);
			
			
			// Save all material details individually for new bill
			List<MaterialTranDtl> newTranDtls = new ArrayList<MaterialTranDtl>();
			
			for(MaterialTranDtlBean materialTranDtlBean : tranHrdBean.getMaterialTranDtls()) {
				// set tranId to all child entries
				materialTranDtlBean.setTranId(tranHrd.getTranId());
				BigDecimal total = materialTranDtlBean.getQty().multiply(materialTranDtlBean.getRate());
				materialTranDtlBean.setTotal(total);
				billAmt = billAmt.add(total);
				
				/////////////////////////////////////////////////////////
				// Rule :Update quantity for the stock in the stock_entry table
				// TODO: If year is closed then the stock will get deducted from the opening stock
				//		 Else it will get deducted from the actual stock
				/////////////////////////////////////////////////////////
				for(StockEntry stock : stockEntries) {
					if(materialTranDtlBean.getStockId() == stock.getStockId()) {
						BigDecimal availableQty = stock.getAvailableQty();
						availableQty = availableQty.subtract(materialTranDtlBean.getQty());
						stock.setAvailableQty(availableQty);
					}
				}
				
				MaterialTranDtl materialTranDtl = null;
				if(materialTranDtlBean.getTranDtlId() == 0) { // NEW ENTRY
					materialTranDtl = new MaterialTranDtl();
					retailTransactionMappingImpl.mapMaterialTranDtlBean(materialTranDtlBean, materialTranDtl);
					newTranDtls.add(materialTranDtl);
				}
			}
			// Update available stock
			retailStockEntryRepository.save(stockEntries);
			
			if(newTranDtls.size() == 0) { // Update existing records
				retailTransactionMappingImpl.mapMaterialTranHrdBean(tranHrdBean, tranHrd);
			} else {
				retailMaterialTranDtlRepository.save(newTranDtls);
			}
			tranHrd.setBillAmt(billAmt);
			retailMaterialTranHrdRepository.saveAndFlush(tranHrd);
			
			if(log.isDebugEnabled()) {
				log.debug("Materials inserted/update into material_tran_dtl table");
			}
		}		
		return uiModel;
	}
	
	private void validateSelectedQty(UIModel uiModel, List<MaterialTranDtlBean> tranDtlsBean, List<StockEntry> stockEntries) {
		Map<Integer, BigDecimal> stockQtyMap = new HashMap<Integer, BigDecimal>();
		
		for(MaterialTranDtlBean tranDtlBean : tranDtlsBean) {
			// Consolidate all selected product and quantities
			int stockId = tranDtlBean.getStockId();
			BigDecimal qty = tranDtlBean.getQty();
			
			if(qty == null) {
				log.error("One of the selected quantities for stockId is null");
				uiModel.setErrorMsg("One of the selected quantities for stockId is null");
				return;
			}
			
			BigDecimal qtyToSell = stockQtyMap.get(stockId);
			if(qtyToSell == null) {
				qtyToSell = qty;
			} else {
				qtyToSell = qtyToSell.add(qty);
			}
			stockQtyMap.put(stockId, qtyToSell);
		}
		
		String errorMsg = "";
		for(Map.Entry<Integer, BigDecimal> entry : stockQtyMap.entrySet()) {
			// Verify available stock with the selected stock
			int stockId = entry.getKey();
			BigDecimal selectedQty = entry.getValue();
			
			StockEntry stock = retailStockEntryRepository.findOne(stockId);
			if(stock == null) {
				log.error("Selected stock id: " + stockId + " does not exists in our record");
				uiModel.setErrorMsg("Selected stock id: " + stockId + " does not exists in our record");
				return;
			} else if(selectedQty == null || stock.getAvailableQty() == null) {
				log.error("Selected quantity: " + selectedQty + " or available qty " + stock.getAvailableQty() + " is null");
				uiModel.setErrorMsg("Selected quantity: " + selectedQty + " or available qty " + stock.getAvailableQty() + " is null");
				return;
			}
			stockEntries.add(stock);
			
			if(stock.getAvailableQty().compareTo(selectedQty) < 0) {
				log.error("Total selected quantity " + selectedQty + " is more than the available quantity " + stock.getAvailableQty() +
						" for material : " + stock.getMaterialMaster().getMaterialName() + " and batch: " + stock.getBatch());
				
				errorMsg = errorMsg + "\n" + 
						"Total selected quantity " + selectedQty + " is more than the available quantity " + stock.getAvailableQty() +
						" for material : " + stock.getMaterialMaster().getMaterialName() + " and batch: " + stock.getBatch();
			}
			
			if(errorMsg != null && errorMsg.trim().length() > 0) {
				uiModel.setErrorMsg(errorMsg);
			}
		}
	}
	
	private UIModel isValidBillEntry(UIModel uiModel, MaterialTranHrdBean tranHrdBean, List<StockEntry> stockEntries) {
		// VALIDATION 1: Bill date can not be null
		if(tranHrdBean.getBillDate() == null) {
			log.error("Bill date can not be null");
			uiModel.setErrorMsg("Bill date can not be null");
			return uiModel;
		}
		// VALIDATION 2: There must be one or more materials selected in the bill
		List<MaterialTranDtlBean> tranDtlsBean = tranHrdBean.getMaterialTranDtls();
		if(tranDtlsBean == null) {
			log.error("No materials selected for this bill");
			uiModel.setErrorMsg("No materials selected for this bill");
			return uiModel;
		} else if (tranDtlsBean.size() > 0) {
			for(MaterialTranDtlBean tranDtlBean : tranDtlsBean) {
				if(tranDtlBean.getQty() == null || tranDtlBean.getStockId() == 0 || tranDtlBean.getRate() == null) {
					log.error("Quantity/StockId/rate can not be null or zero");
					uiModel.setErrorMsg("Quantity/StockId/rate can not be null or zero");
					return uiModel;
				}
			}
		}
		
		// VALIDATION 3: All selected materials should have sufficient qty
		validateSelectedQty(uiModel, tranDtlsBean, stockEntries);
		
		// VALIDATION 4: Billing can not be done for the future date
		if(!adminSvcCommonUtil.isFutureDate(tranHrdBean.getBillDate())) {
			log.error("Billing can not be done for the future date");
			uiModel.setErrorMsg("Billing can not be done for the future date");
			return uiModel;
		}
		
		// VALIDATION 5: If year is already closed then billing can not be done for the previous year
		// TODO: RULE_TO_BE_ENTERED ASHISH : Check if year is closed in the system
		String fy = adminSvcCommonUtil.getFinancialYear(tranHrdBean.getBillDate());
		FyClose fyClose = fyCloseRepository.isFinancialYearClosed(tranHrdBean.getBranchId(), fy);
		byte isPrevFyClosed = (fyClose == null) ? 0 :fyClose.getIsClosed();
		if(!adminSvcCommonUtil.isCurrentFinancialYear(tranHrdBean.getBillDate()) &&
				(isPrevFyClosed == 1)) {
			log.error("Previous financial year is closed so billing for the previous FY is not supported");
			uiModel.setErrorMsg("Previous financial year is closed so billing for the previous FY is not supported");
			return uiModel;
		}
		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteStockEntries(UIModel uiModel) {
		if(uiModel.getBranchBean().getStockEntries() != null && uiModel.getBranchBean().getStockEntries().size() > 0 ) {
			
		}		
		return uiModel;
	}
	
}
