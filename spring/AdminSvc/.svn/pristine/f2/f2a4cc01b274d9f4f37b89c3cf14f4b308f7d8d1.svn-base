package com.org.coop.bs.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.coop.org.exception.AdminSvcCommonException;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.society.data.admin.entities.BranchMaster;
import com.org.coop.society.data.admin.repositories.BranchMasterRepository;

@PropertySource("classpath:adminSvcBS.properties")
@Service
public class AdminSvcCommonUtil {
	
	private static final Logger log = Logger.getLogger(AdminSvcCommonUtil.class); 
	
	@Autowired
	private Environment env;
	
	@Autowired
	private BranchMasterRepository branchMasterRepository;
	
	public long diffInTwoDates(Date fromDate, Date toDate) {
		if(fromDate == null || toDate == null) {
			return 0;
		}
		return (toDate.getTime() - fromDate.getTime())/(24 * 60 * 60 * 1000);
	}
	
	/**
	 * This method adds/substract offset days with input date and returns the new date
	 * @param fromDate
	 * @param OFFSET_DAYS
	 * @return
	 */
	public Date getDatesByOffsetDays(Date fromDate, final int OFFSET_DAYS) {
		Date finalDate = null;
		if(fromDate == null) {
			return finalDate;
		}
		try {
			SimpleDateFormat sdf = new SimpleDateFormat(env.getProperty("date.format"));
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(fromDate);
			calendar.add(Calendar.DATE, OFFSET_DAYS);
			String outDate = sdf.format(calendar.getTime());
			finalDate = sdf.parse(outDate);
		} catch (Exception e) {
			
		}
		return finalDate;
	}
	
	public String getEncodedPassword(String password) {
		int i = 0;
		String hashedPassword = null;
		while (i < 10) {
			BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
			hashedPassword = passwordEncoder.encode(password);
			
			log.debug("Password is hashed: " + hashedPassword);
			i++;
		}
		return hashedPassword;
	}
	
	/**
	 * This method matches two password and return true/false status
	 * @param srcPassword
	 * @param destPassword
	 * @return
	 */
	public boolean isPasswordMatched(String srcPassword, String destPassword) {
		BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
		if(passwordEncoder.matches(srcPassword, destPassword)) {
			return true;
		}
		return false;
	}
	
	public boolean isCurrentFinancialYear(Date actionDate) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		int month = cal.get(Calendar.MONTH);
		int advance = (month <= Calendar.MARCH) ? -1 : 0;
		int year = cal.get(Calendar.YEAR) + advance;
		
		cal.clear();
		cal.set(year, Calendar.APRIL, 1, 0, 0, 0);  // 1st April 00:00:00
		Date fyStartDate = cal.getTime();
		
		cal.clear();
		cal.set(year + 1, Calendar.MARCH, 31, 23, 59, 59);
		Date fyEndDate = cal.getTime();
		
		return actionDate.after(fyStartDate) && actionDate.before(fyEndDate);
	}
	
	public boolean isFutureDate(Date date) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(new Date());
		
		int day = cal.get(Calendar.DAY_OF_MONTH);
		int month = cal.get(Calendar.MONTH);
		int year = cal.get(Calendar.YEAR);
		
		cal.clear();
		cal.set(year, month, day, 23, 59, 59);
		Date today = cal.getTime();
		return date.before(today);
	}
	
	public String getFinancialYear(Date actionDate) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(actionDate);
		int month = cal.get(Calendar.MONTH);
		int year = cal.get(Calendar.YEAR);
		String fy = null;
		if( month > Calendar.MARCH) {
			fy = year + "-" + (year + 1);
		} else {
			fy = (year - 1) + "-" + (year);
		}
		
		return fy;
	}
	
	public Date getDateFormString(String dateStr) {
		SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
		Date date = null;
		try {
			date = formatter.parse(dateStr);
		} catch (ParseException e) {
			log.error("Error while converting the date from string: " + dateStr, e);
		}
		return date;
	}

	public UIModel getFYStartAndEndDate(UIModel uiModel, String fy) {
		String start = "01/04/" + fy.split("-")[0];
		String end = "31/03/" + fy.split("-")[1];
		
		Date fyStartDate = getDateFormString(start);
		Date fyEndDate = getDateFormString(end);
		if(uiModel == null) {
			uiModel = new UIModel();
			BranchBean bb = new BranchBean();
			uiModel.setBranchBean(bb);
		} else if (uiModel.getBranchBean() == null) {
			uiModel.setBranchBean(new BranchBean());
		}
		uiModel.getBranchBean().setFy(fy);
		uiModel.getBranchBean().setFyStartDate(fyStartDate);
		uiModel.getBranchBean().setFyEndDate(fyEndDate);
		return uiModel;
	}
	
	public BranchMaster validateBranch(int branchId) {
		BranchMaster branch = null;
		if(branchId > 0) {
			branch = branchMasterRepository.findOne(branchId);
		}
		if(branch == null || branchId == 0) {
			String errorMsg = "Branch does not exists in our record for branch Id: " + branchId;
			log.error(errorMsg);
			throw new AdminSvcCommonException(errorMsg, BusinessConstants.EXCEPTION_COMMON);
		}
		return branch;
	}
	
	public static void main(String args[]) {
		String dateStart = "04/14/2012";
		String dateStop = "01/13/2012";

		//HH converts hour in 24 hours format (0-23), day calculation
		SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");

		Date d1 = null;
		Date d2 = null;

		try {
			d1 = format.parse(dateStart);
			d2 = format.parse(dateStop);
		} catch(Exception e) {
			e.printStackTrace();
		}
		System.out.println(new AdminSvcCommonUtil().diffInTwoDates(d1, d2));
		System.out.println(new AdminSvcCommonUtil().getDatesByOffsetDays(d1, -2));
	}
}
