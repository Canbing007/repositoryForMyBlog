package com.org.coop.retail.bs.mapper.converter;

import org.apache.log4j.Logger;
import org.dozer.CustomConverter;
import org.dozer.DozerConverter;
import org.dozer.Mapper;
import org.dozer.MapperAware;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.coop.org.exception.PaymentException;
import com.org.coop.bs.util.RetailBusinessConstants;
import com.org.coop.canonical.account.beans.CardRegisterBean;
import com.org.coop.canonical.account.beans.CashRegisterBean;
import com.org.coop.canonical.account.beans.ChequeRegisterBean;
import com.org.coop.canonical.account.beans.CreditRegisterBean;
import com.org.coop.canonical.account.beans.LoanRegisterBean;
import com.org.coop.retail.entities.Account;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.GlLedgerHrd;
import com.org.coop.retail.entities.TransactionPayment;
import com.org.coop.retail.repositories.AccountRepository;
import com.org.coop.retail.repositories.GlLedgerHeaderRepository;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.servicehelper.PaymentServiceHelperImpl;

@Component("transactionPaymentCC")
public class TransactionPaymentCC extends DozerConverter<Object, TransactionPayment> implements MapperAware, CustomConverter {
	
	private static final Logger log = Logger.getLogger(TransactionPaymentCC.class); 
	
	@Autowired
	private RetailBranchMasterRepository retailBranchMasterRepository;
	
	@Autowired
	private GlLedgerHeaderRepository glLedgerHeaderRepository;
	
	@Autowired
	private AccountRepository accountRepository;
	
	public TransactionPaymentCC() {
		super(Object.class, TransactionPayment.class);
	}
	
	public TransactionPaymentCC(Class prototypeA, Class prototypeB) {
		super(prototypeA, prototypeB);
	}
	
	public void setMapper(Mapper arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Object convertFrom(TransactionPayment src, Object dest) {
		return null;
	}

	@Override
	public TransactionPayment convertTo(Object src, TransactionPayment dest) {
		if(src != null) {
			int branchId = 0;
			int glTranId = 0;
			if("CASH_PAYMENT".equalsIgnoreCase(getParameter())) {
				CashRegisterBean cash = (CashRegisterBean) src;
				branchId = cash.getBranchId();
				glTranId = cash.getGlTranId();
				dest.setPaymentType(RetailBusinessConstants.MODE_OF_PAYMENT_CASH);
			} else if("CHEQUE_PAYMENT".equalsIgnoreCase(getParameter())) {
				ChequeRegisterBean cheque = (ChequeRegisterBean) src;
				branchId = cheque.getBranchId();
				glTranId = cheque.getGlTranId();
				dest.setPaymentType(RetailBusinessConstants.MODE_OF_PAYMENT_CHEQUE);
			} else if("CARD_PAYMENT".equalsIgnoreCase(getParameter())) {
				CardRegisterBean card = (CardRegisterBean) src;
				branchId = card.getBranchId();
				glTranId = card.getGlTranId();
				dest.setPaymentType(RetailBusinessConstants.MODE_OF_PAYMENT_CARD);
			} else if("CREDIT_PAYMENT".equalsIgnoreCase(getParameter())) {
				CreditRegisterBean credit = (CreditRegisterBean) src;
				branchId = credit.getBranchId();
				glTranId = credit.getGlTranId();
				
				if(credit.getAccountId() > 0) {
					Account account = accountRepository.findOne(credit.getAccountId());
					if(account == null) {
						String errorMsg  = "Account does not exists in our record for the account number: " + credit.getAccountId();
						log.error(errorMsg);
						throw new PaymentException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
					}
					dest.setPaymentType(account.getAccountType());
				} else {
					dest.setPaymentType(RetailBusinessConstants.MODE_OF_PAYMENT_CRDR);
				}
			} else if("LOAN_PAYMENT".equalsIgnoreCase(getParameter())) {
				LoanRegisterBean loan = (LoanRegisterBean) src;
				branchId = loan.getBranchId();
				glTranId = loan.getGlTranId();
				if(loan.getAccountId() > 0) {
					Account account = accountRepository.findOne(loan.getAccountId());
					if(account == null) {
						String errorMsg  = "Account does not exists in our record for the account number: " + account.getAccountId();
						log.error(errorMsg);
						throw new PaymentException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
					}
					dest.setPaymentType(account.getAccountType());
				} else {
					dest.setPaymentType(RetailBusinessConstants.MODE_OF_PAYMENT_LOAN_OTHER_BANK);
				}
			}
			BranchMaster branch = retailBranchMasterRepository.findOne(branchId);
			GlLedgerHrd glLedgerHrd = glLedgerHeaderRepository.findOne(glTranId);
			dest.setBranchMaster(branch);
			dest.setGlLedgerHrd(glLedgerHrd);
		}
		return dest;
	}
}
