package com.org.coop.admin.servicehelper;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;




import com.coop.org.exception.AdminSvcCommonException;
import com.org.coop.bs.mapper.CountryStateDistMappingImpl;
import com.org.coop.bs.mapper.DropdownMasterSetupMappingImpl;
import com.org.coop.bs.mapper.ModuleMappingImpl;
import com.org.coop.bs.mapper.SecurityQuestionsMappingImpl;
import com.org.coop.bs.util.AdminSvcCommonUtil;
import com.org.coop.bs.util.BusinessConstants;
import com.org.coop.canonical.master.beans.CountryMasterBean;
import com.org.coop.canonical.master.beans.DistrictMasterBean;
import com.org.coop.canonical.master.beans.DropdownMasterBean;
import com.org.coop.canonical.master.beans.MasterDataBean;
import com.org.coop.canonical.master.beans.ModuleMasterBean;
import com.org.coop.canonical.master.beans.SecurityQuestionsMasterBean;
import com.org.coop.canonical.master.beans.StateMasterBean;
import com.org.coop.society.data.admin.entities.BranchMaster;
import com.org.coop.society.data.admin.entities.CountryMaster;
import com.org.coop.society.data.admin.entities.DistrictMaster;
import com.org.coop.society.data.admin.entities.DropdownMaster;
import com.org.coop.society.data.admin.entities.InactiveDropdown;
import com.org.coop.society.data.admin.entities.ModuleMaster;
import com.org.coop.society.data.admin.entities.SecurityQuestion;
import com.org.coop.society.data.admin.entities.StateMaster;
import com.org.coop.society.data.admin.repositories.BranchMasterRepository;
import com.org.coop.society.data.admin.repositories.CountryMasterRepository;
import com.org.coop.society.data.admin.repositories.DistrictMasterRepository;
import com.org.coop.society.data.admin.repositories.DropdownMasterRepository;
import com.org.coop.society.data.admin.repositories.InactiveDropdownRepository;
import com.org.coop.society.data.admin.repositories.ModuleMasterRepository;
import com.org.coop.society.data.admin.repositories.SecurityQuestionRepository;
import com.org.coop.society.data.admin.repositories.StateMasterRepository;import com.sun.org.apache.bcel.internal.generic.BranchInstruction;


@Service
public class MasterDataSetupServiceHelperImpl {

	private static final Logger log = Logger.getLogger(MasterDataSetupServiceHelperImpl.class); 
	
	@Autowired
	private CountryMasterRepository countryMasterRepository;
	
	@Autowired
	private StateMasterRepository stateMasterRepository;
	
	@Autowired
	private DistrictMasterRepository districtMasterRepository;
	
	@Autowired
	private ModuleMasterRepository moduleMasterRepository;
	
	@Autowired
	private SecurityQuestionRepository securityQuestionRepository;
	
	@Autowired
	private CountryStateDistMappingImpl countryStateDistMap;
	
	@Autowired
	private SecurityQuestionsMappingImpl securityQuestionsMap;
	
	@Autowired
	private DropdownMasterRepository dropdownMasterRepository;
	
	@Autowired
	private DropdownMasterSetupMappingImpl dropdownMasterSetupMappingImpl;
	
	@Autowired
	private InactiveDropdownRepository inactiveDropdownRepository;
	
	@Autowired
	private ModuleMappingImpl moduleMap;
	
	@Autowired
	private BranchMasterRepository branchMasterRepository;
	
	@Autowired
	private AdminSvcCommonUtil adminSvcCommonUtil;
	
	@Transactional(value="adminTransactionManager")
	public MasterDataBean saveCountryStateDist(MasterDataBean masterDataBean) {
		
		if(masterDataBean == null || masterDataBean.getCountries() == null) {
			masterDataBean.setErrorMsg("Country details not passed correctly");
		}
		
		Set<CountryMasterBean> countries = masterDataBean.getCountries();
		
		for(CountryMasterBean countryBean: countries) {
			CountryMaster country = countryMasterRepository.findByCountryId(countryBean.getCountryId());
			if(country == null) {
				country = new CountryMaster();
			}
			countryStateDistMap.mapBean(countryBean, country);
			countryMasterRepository.saveAndFlush(country);
			if(log.isDebugEnabled()) {
				log.debug("Country/State/District created/updated for countryId: " + countryBean.getCountryId());
			}
		}
//		masterDataBean = getCountryStateDist(((CountryMasterBean)masterDataBean.getCountries().toArray()[0]).getCountryCode(), "", "");
		return masterDataBean;
	}
	
	@Transactional(value="adminTransactionManager")
	public MasterDataBean getCountryStateDist(String countryCode,String stateCode,String distCode) {
		MasterDataBean masterData = new MasterDataBean();
		// Check if the branch already exists
		CountryMaster country = countryMasterRepository.findByCountryCode(countryCode);
		if(country == null) {
			masterData.setErrorMsg("Country does not exist for Country Code: " + countryCode);
			return masterData;
		}
		CountryMasterBean countryMaster = new CountryMasterBean();
		Set<CountryMasterBean> countrySet = new HashSet<CountryMasterBean>();
		countrySet.add(countryMaster);
		countryStateDistMap.mapBean(country, countryMaster);
		masterData.setCountries(countrySet);
		
		
		// Remove other states from the master data
		if(StringUtils.isNotEmpty(stateCode)) {
			for(CountryMasterBean countryBean : masterData.getCountries()) {
				if(countryBean.getStates() != null) {
					Iterator<StateMasterBean> it = countryBean.getStates().iterator();
					while(it.hasNext()) {
						if(!stateCode.equals(it.next().getStateCode())) {
							it.remove();
						}
					}
				}
			}
			
			// Remove other districts from the master data
			if(StringUtils.isNotEmpty(distCode)) {
				for(CountryMasterBean countryBean : masterData.getCountries()) {
					for(StateMasterBean statBean : countryBean.getStates()) {
						if(statBean.getDistricts() != null) {
							Iterator<DistrictMasterBean> it = statBean.getDistricts().iterator();
							while(it.hasNext()) {
								if(!distCode.equals(it.next().getDistrictCode())) {
									it.remove();
								}
							}
						}
					}
				}
			}
		}
		log.debug("Branch details has been retrieved from database for branchId: " + countryCode);
		return masterData;
	}
	
	@Transactional(value="adminTransactionManager")
	public MasterDataBean deleteCountryStateDist(MasterDataBean masterDataBean, String countryCode,String stateCode,String distCode) {
		
		if(masterDataBean == null || masterDataBean.getCountries() == null) {
			masterDataBean.setErrorMsg("Country details not passed correctly");
		}
		
		Set<CountryMasterBean> countries = masterDataBean.getCountries();
		
		for(CountryMasterBean countryBean: countries) {
			CountryMaster country = countryMasterRepository.findByCountryId(countryBean.getCountryId());
			if(country == null) {
				if(log.isDebugEnabled()) {
					log.error("Country does not exists");
				}
				masterDataBean.setErrorMsg("Country does not exists for country code: " + countryCode);
				return masterDataBean;
			}
			
			if(StringUtils.isNotEmpty(distCode)) {
				DistrictMaster district = districtMasterRepository.findByDistrictCode(distCode);
				if(district == null) {
					if(log.isDebugEnabled()) {
						log.error("District does not exists");
					}
					masterDataBean.setErrorMsg("District does not exists for district code: " + distCode);
					return masterDataBean;
				}
				countryStateDistMap.mapBean(countryBean, country);
				countryMasterRepository.saveAndFlush(country);
				
				districtMasterRepository.delete(district);
				
//				masterDataBean = getCountryStateDist(countryBean.getCountryCode(), stateCode, distCode);
					
			} else if(StringUtils.isNotEmpty(stateCode)) {
				StateMaster state = stateMasterRepository.findByStateCode(stateCode);
				if(state == null) {
					if(log.isDebugEnabled()) {
						log.error("State does not exists");
					}
					masterDataBean.setErrorMsg("State does not exists for state code: " + stateCode);
					return masterDataBean;
				}
				countryStateDistMap.mapBean(countryBean, country);
				countryMasterRepository.saveAndFlush(country);
				
				stateMasterRepository.delete(state);
			} else if(StringUtils.isNotEmpty(countryCode)) {
				
				countryStateDistMap.mapBean(countryBean, country);
				countryMasterRepository.saveAndFlush(country);
				
				countryMasterRepository.delete(country);
//				masterDataBean = getCountryStateDist(countryBean.getCountryCode(), "", "");
			}
		}
		
		
		return masterDataBean;
	}
	
	@Transactional(value="adminTransactionManager")
	public MasterDataBean getModuleRulesAndPermissions(String moduleName) {
		
		MasterDataBean masterData = new MasterDataBean();
		List<ModuleMaster> moduleList = new ArrayList<ModuleMaster>();
		if(StringUtils.isNotBlank(moduleName)) {
			ModuleMaster module = moduleMasterRepository.findByModuleName(moduleName);
			
			if(module == null) {
				masterData.setErrorMsg("Module does not exist for Module Name: " + moduleName);
				return masterData;
			}
			moduleList.add(module);
		} else {
			moduleList = moduleMasterRepository.findAll();
			if(moduleList == null || moduleList.size() == 0) {
				masterData.setErrorMsg("No modules available in the database");
				return masterData;
			}
		}
		Set<ModuleMasterBean> moduleSet = new HashSet<ModuleMasterBean>();
		for(ModuleMaster module : moduleList) {
			ModuleMasterBean moduleMasterBean = new ModuleMasterBean();
			moduleSet.add(moduleMasterBean);
			moduleMap.mapBean(module, moduleMasterBean);
		}
		
		masterData.setModules(moduleSet);
		
		return masterData;
	}
	
	@Transactional(value="adminTransactionManager")
	public MasterDataBean saveModuleRulesAndPermissions(MasterDataBean masterDataBean) {
		
		if(masterDataBean == null || masterDataBean.getModules() == null) {
			masterDataBean.setErrorMsg("Module details not passed correctly");
		}
		
		Set<ModuleMasterBean> modules = masterDataBean.getModules();
		
		for(ModuleMasterBean moduleBean: modules) {
			ModuleMaster module = moduleMasterRepository.findByModuleName(moduleBean.getModuleName());
			if(module == null) {
				module = new ModuleMaster();
			}else if(module != null && moduleBean.getModuleId() == 0) {
				masterDataBean.setErrorMsg("Trying to create duplicate module: " + moduleBean.getModuleName());
				return masterDataBean;
			}
			moduleMap.mapBean(moduleBean, module);
			moduleMasterRepository.saveAndFlush(module);
			if(log.isDebugEnabled()) {
				log.debug("Module Rules and permission is created/updated for module: " + moduleBean.getModuleName());
			}
		}
//		masterDataBean = getModuleRulesAndPermissions(((ModuleMasterBean)masterDataBean.getModules().toArray()[0]).getModuleName());
		return masterDataBean;
	}
	
	/**
	 * This method gets all active security questions (end_date = NULL) if noOfSecurityQuestion = 0.
	 * Otherwise it gets security questions by limits randomly. E.g. noOfSecurityQuestion = 3 then it retrieves 3 active 
	 * security questions randomly.
	 * @param noOfSecurityQuestion
	 * @return
	 */
	@Transactional(value="adminTransactionManager")
	public MasterDataBean getSecurityQuestions(int noOfSecurityQuestion) {
		
		MasterDataBean masterData = new MasterDataBean();
		Set<SecurityQuestionsMasterBean> securityQuestions = new HashSet<SecurityQuestionsMasterBean>();
		masterData.setSecurityQuestions(securityQuestions);
		
		List<SecurityQuestion> securityQuestionList = new ArrayList<SecurityQuestion>();
		// Retrieve all security questions
		if(noOfSecurityQuestion == 0) {
			securityQuestionList = securityQuestionRepository.findAll();
		} else if (noOfSecurityQuestion > 0) {
			securityQuestionList = securityQuestionRepository.getRandomQuestionsByLimit(new PageRequest(0, noOfSecurityQuestion));
		}
		for(SecurityQuestion securityQuestion : securityQuestionList) {
			SecurityQuestionsMasterBean securityQuestionBean = new SecurityQuestionsMasterBean();
			securityQuestions.add(securityQuestionBean);
			securityQuestionsMap.mapBean(securityQuestion, securityQuestionBean);
		}
		return masterData;
	}
	
	@Transactional(value="adminTransactionManager")
//	@Modifying(clearAutomatically=true)
	public MasterDataBean saveSecurityQuestions(MasterDataBean masterDataBean) {
		
		if(masterDataBean == null || masterDataBean.getSecurityQuestions() == null) {
			masterDataBean.setErrorMsg("Security question is not passed correctly");
		}
		
		Set<SecurityQuestionsMasterBean> securityQuestions = masterDataBean.getSecurityQuestions();
		
		for(SecurityQuestionsMasterBean securityQuestionBean: securityQuestions) {
			SecurityQuestion securityQuestion = securityQuestionRepository.findByQuestionId(securityQuestionBean.getQuestionId());
			if(securityQuestion == null) {
				securityQuestion = new SecurityQuestion();
			}
			securityQuestionsMap.mapBean(securityQuestionBean, securityQuestion);
			securityQuestionRepository.saveAndFlush(securityQuestion);
			if(log.isDebugEnabled()) {
				log.debug("Security question saved/updated");
			}
		}
//		masterDataBean = getSecurityQuestions(0);
		return masterDataBean;
	}
	
	@Transactional(value="adminTransactionManager")
	public MasterDataBean deleteSecurityQuestions(MasterDataBean masterDataBean) {
		
		if(masterDataBean == null || masterDataBean.getSecurityQuestions() == null) {
			masterDataBean.setErrorMsg("Security question details not passed correctly to delete");
		}
		
		Set<SecurityQuestionsMasterBean> securityQuestions = masterDataBean.getSecurityQuestions();
		
		for(SecurityQuestionsMasterBean securityQuestionBean: securityQuestions) {
			SecurityQuestion securityQuestion = securityQuestionRepository.findByQuestionId(securityQuestionBean.getQuestionId());
			if(securityQuestion == null) {
				masterDataBean.setErrorMsg("Security question details not passed correctly to delete for security question id: " + securityQuestionBean.getQuestionId());
				return masterDataBean;
			}
			securityQuestionsMap.mapBean(securityQuestionBean, securityQuestion);
			securityQuestionRepository.saveAndFlush(securityQuestion);
			
			securityQuestionRepository.delete(securityQuestion.getQuestionId());
			if(log.isDebugEnabled()) {
				log.debug("Security question deleted");
			}
		}
//		masterDataBean = getSecurityQuestions(0);
		return masterDataBean;
	}
	
	public MasterDataBean getDropdown(int branchId, String category) {
		
		MasterDataBean masterData = new MasterDataBean();
		Set<DropdownMasterBean> dropdownMasterBeanSet = new HashSet<DropdownMasterBean>();
		masterData.setDropdowns(dropdownMasterBeanSet);
		
		// Retrieve total list of dropdown options
		List<DropdownMaster> dropdownList = null;
		if(StringUtils.isBlank(category)) {
			dropdownList = dropdownMasterRepository.findAll();
		} else {
			dropdownList = dropdownMasterRepository.findByCategory(category);
		}
		
		// Retrieve inactive list of dropdown options for a given branch
		List<String> listOfInactiveDropdown = new ArrayList<>();
		BranchMaster branch = null;
		if(branchId > 0) {
			listOfInactiveDropdown = inactiveDropdownRepository.findCodeByBranchId(branchId);
			branch = branchMasterRepository.findOne(branchId);
		}
		
		if(dropdownList != null && dropdownList.size() > 0) {
			final List<String> inactiveDropdownCodeList = listOfInactiveDropdown;
			final String branchName = (branch != null) ? branch.getBranchName() : null;
			dropdownList.forEach( dropdown -> {
				DropdownMasterBean dropdownMasterBean = new DropdownMasterBean();
				dropdownMasterSetupMappingImpl.mapBean(dropdown, dropdownMasterBean);
				if(inactiveDropdownCodeList.contains(dropdown.getCode())) {
					dropdownMasterBean.setDeleteInd("Y");
				} else {
					dropdownMasterBean.setDeleteInd("N");
				}
				dropdownMasterBean.setBranchId(branchId);
				dropdownMasterBean.setBranchName(branchName);
				dropdownMasterBeanSet.add(dropdownMasterBean);
			} );
		}
		return masterData;
	}
	
	public MasterDataBean saveDropdown(MasterDataBean masterDataBean) {
		
		if(masterDataBean.getDropdowns() != null && masterDataBean.getDropdowns().size() > 0) {
			Set<DropdownMasterBean> dropdownBeans = masterDataBean.getDropdowns();
			dropdownBeans.forEach(dropdownBean -> {
				DropdownMaster dropdown = null;
				if(StringUtils.isNotBlank(dropdownBean.getCode())) {
					dropdown = dropdownMasterRepository.findOne(dropdownBean.getCode());
				}
				
				if(dropdown == null) {
					if(log.isDebugEnabled()) {
						log.debug("Code " + dropdownBean.getCode() + " does not exists in our record. Adding new record");
					}
					dropdown = new DropdownMaster();
				}
				
				dropdownMasterSetupMappingImpl.mapBean(dropdownBean, dropdown);
				
				// Save dropdown_master table
				dropdownMasterRepository.saveAndFlush(dropdown);
				
				if(dropdownBean.getBranchId() > 0) { // Activating or deactivating dropdown entry
					BranchMaster branch = adminSvcCommonUtil.validateBranch(dropdownBean.getBranchId());
					dropdown = dropdownMasterRepository.findOne(dropdownBean.getCode());
					
					if(dropdown == null) {
						String errorMsg = "Dropdown entry does not exists in our record for dropdown code: " + dropdownBean.getCode();
						log.error(errorMsg);
						throw new AdminSvcCommonException(errorMsg, BusinessConstants.EXCEPTION_COMMON);
					}
					
					if(log.isDebugEnabled()) {
						log.debug("Branch and dropdown record has been retrieved. Going to make an entry into inactive_dropdown");
					}
					
					InactiveDropdown inactiveDropdown = new InactiveDropdown();
					inactiveDropdown.setBranchMaster(branch);
					inactiveDropdown.setDropdownMaster(dropdown);
					inactiveDropdown.setCreateUser(dropdownBean.getCreateUser());
					inactiveDropdown.setUpdateUser(dropdownBean.getUpdateUser());
					inactiveDropdown.setDeleteInd("Y");
					inactiveDropdown.setDeleteReason(dropdownBean.getDeleteReason());
					inactiveDropdown.setPassingAuthInd(dropdownBean.getPassingAuthInd());
					inactiveDropdown.setPassingAuthRemark(dropdownBean.getPassingAuthRemark());
					
					inactiveDropdownRepository.saveAndFlush(inactiveDropdown);
					
					if(log.isDebugEnabled()) {
						log.debug("Inactive dropdown list has been populated for branch: " + dropdownBean.getBranchId());
					}
				}
			});
		}
		return masterDataBean;
	}
}
