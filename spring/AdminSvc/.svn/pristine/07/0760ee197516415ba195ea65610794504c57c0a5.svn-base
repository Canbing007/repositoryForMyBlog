/**
 * This class handles global exceptions. If any custom exception, HttpUnauthorizedException occurs then it returns unauthorized response
 * For AccessDeniedException, it redirects to the access denied page else it will redirect to the error page
 */
package com.org.coop.config;

import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.servlet.ModelAndView;

import com.coop.org.exception.HttpUnauthorizedException;
import com.org.coop.admin.servicehelper.BranchSetupServiceHelperImpl;

@ControllerAdvice
public class GlobalDefaultExceptionHandler {
	private static final Logger log = Logger.getLogger(GlobalDefaultExceptionHandler.class); 
//	public static final String DEFAULT_ERROR_VIEW = "error";
//
//    @ExceptionHandler(value = Exception.class)
//    public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {
//        // If the exception is annotated with @ResponseStatus rethrow it and let
//        // the framework handle it
//        // AnnotationUtils is a Spring Framework utility class.
//        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
//            throw e;
//        }
//        log.error("Exception occured: Reason - ", e);
//        // Otherwise setup and send the user to a default error-view.
//        ModelAndView mav = new ModelAndView();
//        mav.addObject("exception", e);
//        mav.addObject("url", req.getRequestURL());
//        mav.addObject("user", getPrincipal());
//        if(e instanceof org.springframework.security.access.AccessDeniedException) {
//        	mav.setViewName("accessDenied");
//        } else {
//        	mav.setViewName(DEFAULT_ERROR_VIEW);
//        }
//        return mav;
//    }
    
    @ExceptionHandler({Exception.class})
    @ResponseBody
    @ResponseStatus(value = HttpStatus.EXPECTATION_FAILED)
    public Map<String, String> exceptionInProcessing(Exception e) {
        Map<String, String> exception = new HashMap<String, String>();

        log.error("Unable to process. Some error occured: " + e.getMessage(), e);
        exception.put("code", "500");
        exception.put("reason", e.getMessage());

        return exception;
    }
    
    @ExceptionHandler({HttpUnauthorizedException.class})
    @ResponseBody
    @ResponseStatus(value = HttpStatus.UNAUTHORIZED)
    public Map<String, String> unauthorizedAccess(Exception e) {
        Map<String, String> exception = new HashMap<String, String>();

        log.error("unauthorized Access to the API: " + e.getMessage(), e);
        exception.put("code", "401");
        exception.put("reason", e.getMessage());

        return exception;
    }
    
    @ExceptionHandler({SQLException.class})
    @ResponseBody
    @ResponseStatus(value = HttpStatus.EXPECTATION_FAILED)
    public Map<String, String> sqlExceptionInProcessing(Exception e) {
        Map<String, String> exception = new HashMap<String, String>();

        log.error("Unable to process. SQL error occured: " + e.getMessage(), e);
        exception.put("code", "500");
        exception.put("reason", e.getMessage());

        return exception;
    }
}
