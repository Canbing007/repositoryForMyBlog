package com.org.coop.retail.servicehelper;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.org.coop.bs.util.RetailBusinessConstants;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.RetailStockEntryBean;
import com.org.coop.canonical.beans.RetailStockReturnBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.RetailStockEntryMappingImpl;
import com.org.coop.retail.bs.mapper.RetailStockReturnMappingImpl;
import com.org.coop.retail.entities.StockEntry;
import com.org.coop.retail.entities.StockReturn;
import com.org.coop.retail.repositories.RetailStockEntryRepository;
import com.org.coop.retail.repositories.RetailStockReturnRepository;

@Service
public class RetailStockManagementServiceHelperImpl {

	private static final Logger log = Logger.getLogger(RetailStockManagementServiceHelperImpl.class); 
	
	@Autowired
	private RetailStockEntryRepository retailStockEntryRepository;
	
	@Autowired
	private RetailStockEntryMappingImpl retailStockEntryMappingImpl;
	
	@Autowired
	private RetailStockReturnRepository retailStockReturnRepository;
	
	@Autowired
	private RetailStockReturnMappingImpl retailStockReturnMappingImpl;
	
	@Transactional(value="retailTransactionManager")
	public UIModel getStockEntries(int branchId, int vendorId, int materialId, int pageNo, int recordsPerPage, String challanNo, String billNo) {
		UIModel uiModel = new UIModel();
		List<StockEntry> stocks = null;
		
		if(pageNo == 0) pageNo = 1;
		if(recordsPerPage == 0) recordsPerPage = 1000000;
		
		PageRequest pageRequest = new PageRequest(pageNo - 1, recordsPerPage, Sort.Direction.DESC, "challanDate");
		int recordCount = 0;
		if(branchId > 0) {
			if(vendorId > 0) {
				stocks = retailStockEntryRepository.findByVendorId(branchId, vendorId, pageRequest);
				recordCount = retailStockEntryRepository.countByVendorId(branchId, vendorId);
			} else if(materialId > 0) {
				stocks = retailStockEntryRepository.findByMaterialId(branchId, materialId, pageRequest);
				recordCount = retailStockEntryRepository.countByMaterialId(branchId, materialId);
			} else {
				stocks = retailStockEntryRepository.findByBranchId(branchId, pageRequest);
				recordCount = retailStockEntryRepository.countByBranchId(branchId);
			}
		}
		
		if(stocks != null && stocks.size() > 0) {
			uiModel.setRecordCount(recordCount);
			uiModel.setPageNo(pageNo);
			uiModel.setRecordsPerPage(recordsPerPage);
			
			List<RetailStockEntryBean> stocksBean = new ArrayList<RetailStockEntryBean>();
			for(StockEntry stock : stocks) {
				RetailStockEntryBean stockBean = new RetailStockEntryBean();
				retailStockEntryMappingImpl.mapBean(stock, stockBean);
				stocksBean.add(stockBean);
			}
			
			uiModel.setBranchBean(new BranchBean());
			uiModel.getBranchBean().setStockEntries(stocksBean);
		} else {
			if(log.isDebugEnabled()) {
				log.debug("No Stock-in records found for given input");
			}
		}
		return uiModel;
	}
	
	/**
	 * This method can save the following scenarios <br/>
	 * 1. a. Fresh stock entry (without bill) where parentStockId = 0 and entry_type = 'NEW' <br/>
	 * &nbsp;&nbsp;&nbsp; b. Fresh stock purchase (with bill) where parentStockId = 0 and entry_type = 'PURCHASE' <br/>
	 * 2. a. Opening stock entry (after year close) where parentStockId > 0 and entry_type = 'YR_CLOSE_OPENING'. <br/>
	 * &nbsp;&nbsp;&nbsp; b. Opening stock entry (1st time installation) where parentStockId = 0 and entry_type = 'OPENING'. <br/>
	 * 3. a. Purchase return stock entry where parentStockId > 0 and entry_type = 'PURCHASE_RETURN' <br/>
	 * &nbsp;&nbsp;&nbsp; b. stock return (before purchase) stock where parentStockId > 0 and entry_type = 'ENTRY_RETURN'  <br/>
	 * 4. TODO: Shortage after year close where parentStockId > 0 and entry_type = 'SHORTAGE'. <br/>
	 * 5. TODO: a. Stock transfer among branches where parentStockId > 0 and entry_type = 'TRANSFER'. <br/>
	 * &nbsp;&nbsp;&nbsp; b. Stock return from branch where parentStockId > 0 and entry_type = 'TRANSFER_RETURN'. <br/>
	 * @param uiModel
	 * @return
	 */
	@Transactional(value="retailTransactionManager")
	public UIModel saveStockEntries(UIModel uiModel) {
		if(uiModel.getBranchBean().getStockEntries() != null && uiModel.getBranchBean().getStockEntries().size() > 0 ) {
			
			List<RetailStockEntryBean> stocksBean = uiModel.getBranchBean().getStockEntries();
			List<StockEntry> stocks = new ArrayList<StockEntry>();
			for(RetailStockEntryBean stockBean : stocksBean) {
				int parentStockId = stockBean.getParentStockId();
				int stockId = stockBean.getStockId();
				int branchId = stockBean.getBranchId();
				int vendorId = stockBean.getVendorId();
				int materialId = stockBean.getMaterialId();
				String batch = stockBean.getBatch();
				
				
				
				//**********************
				// Validate the input
				//**********************
				uiModel = isValidStockInput(uiModel, stockBean);
				if(StringUtils.isNotBlank(uiModel.getErrorMsg())) {
					return uiModel;
				}
				
				//******************************************
				// opening stocks, purchase return stocks or entry returns stock will have parent stock id > 0
				// *****************************************
				if(parentStockId > 0) { 
					StockEntry parentStock = retailStockEntryRepository.findOne(parentStockId);
					if(parentStock == null) {
						log.error("Incorrect parentStockId passed: " + parentStockId);
						uiModel.setErrorMsg("Incorrect parentStockId passed: " + parentStockId);
						return uiModel;
					}
					stockBean.setMaterialId(parentStock.getMaterialMaster().getMaterialId());
					stockBean.setBranchId(parentStock.getBranchMaster().getBranchId());
					stockBean.setVendorId(parentStock.getVendorMaster().getVendorId());
					stockBean.setBatch(parentStock.getBatch());
					
					// **************************************
					// If stock is returned to vendor then the available qty has to be reduced
					// TODO: If year is closed then the available qty should not be reduced
					//***************************************
					if(RetailBusinessConstants.ENTRY_TYPE_PURCHASE_RETURN.equals(stockBean.getEntryType()) || 
							RetailBusinessConstants.ENTRY_TYPE_ENTRY_RETURN.equals(stockBean.getEntryType()) ) {
						// Return quantity can not be more than available quantity
						BigDecimal availableQty = parentStock.getAvailableQty();
						
						if(availableQty != null && stockBean.getQty() != null) {
							if(availableQty.compareTo(stockBean.getQty()) < 0) {
								log.error("Available quantity " + availableQty + " must be more than the return quantity " + stockBean.getQty() + " for the stock id " + stockId);
								uiModel.setErrorMsg("Available quantity " + availableQty + " must be more than the return quantity " + stockBean.getQty() + " for the stock id " + stockId);
								return uiModel;
							}
							availableQty = availableQty.subtract(stockBean.getQty());
						} else {
							log.error("Available quantity " + availableQty + " or Return quantity " + stockBean.getQty() + " can not be null");
							uiModel.setErrorMsg("Available quantity " + availableQty + " or Return quantity " + stockBean.getQty() + " can not be null");
							return uiModel;
						}
						parentStock.setAvailableQty(availableQty);
						retailStockEntryRepository.saveAndFlush(parentStock);
					}
				} 
				// *****************************************************
				// Fresh stock entry/purchase and opening stock (1st time installation) will have parentStockId = 0
				// *****************************************************
				else if(parentStockId == 0) {  
					if(stockBean.getEntryType() == null) {
						if(StringUtils.isNotBlank(stockBean.getBillNo())) { // 
							stockBean.setEntryType(RetailBusinessConstants.ENTRY_TYPE_PURCHASE);
						} else {
							stockBean.setEntryType(RetailBusinessConstants.ENTRY_TYPE_NEW);
							// As the bill is not received so the purchased price is either of the following (whichever matches first)
							//	1. Last price of the same material of same batch (same branch)
							//	2. Last price of the same material from the same vendor (same branch)
							//  3. Last price of the same material from another vendor (same branch)
							//  4. MRP of the material
							
							BigDecimal stockPrice = retailStockEntryRepository.getStockEntryPrice(branchId, materialId, vendorId, batch);
							stockBean.setPurchasePrice(stockPrice);
						}
					}
				}
				
				
				StockEntry stock = null;
				if(stockId == 0) { // entry_type = 'NEW' or 'PURCHASED' or 'OPENING'
					if(log.isDebugEnabled()) {
						log.debug("New stock to be added for material: " + stockBean.getMaterialId());
					}
					stock = new StockEntry();
				} else {
					stock = retailStockEntryRepository.findOne(stockId);
					if(stock == null) {
						log.error("Incorrect stockId passed: " + stockId);
						uiModel.setErrorMsg("Incorrect stockId passed: " + stockId);
						return uiModel;
					}
				}
				//TODO: Need to add all validations here. Example delete stock is possible if the stock is not sold.
				// Modification of stock is possible if the sold stock is not greater than the modification qty
				retailStockEntryMappingImpl.mapBean(stockBean, stock);
				stocks.add(stock);
			}
			if(stocks.size() > 0) {
				retailStockEntryRepository.save(stocks);
				if(log.isDebugEnabled()) {
					log.debug("All stocks added");
				}
				
				// stockBean and stocks size has to be same
				if(stocksBean.size() == stocks.size()) {
					int i = 0;
					for(StockEntry stock : stocks) {
						RetailStockEntryBean stockBean = stocksBean.get(i++);
						retailStockEntryMappingImpl.mapBean(stock, stockBean);
					}
				}
			}
		}		
		return uiModel;
	}

	private UIModel isValidStockInput(UIModel uiModel,
			RetailStockEntryBean stockBean) {
		int parentStockId = stockBean.getParentStockId();
		int stockId = stockBean.getStockId();
		
		// VALIDATION 1: Parent stockID > 0 for entry type = PURCHASE_RETURN, ENTRY_RETURN, YR_CLOSE_OPENING, SHORTAGE, TRANSFER, TRANSFER_RETURN
		//					Parent stock id = 0 for entry type = null/OPENING
		if(parentStockId > 0) {
			List<String> entryTypeArr = new ArrayList<String>();
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_PURCHASE_RETURN);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_ENTRY_RETURN);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_YR_CLOSE_OPENING);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_SHORTAGE);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_TRANSFER);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_TRANSFER_RETURN);
			if( !entryTypeArr.contains(stockBean.getEntryType()) )  {
				log.error("parent stock id must be greater than zero for entry type = " + entryTypeArr + " and you have selected different one");
				uiModel.setErrorMsg("parent stock id must be greater than zero for entry type = " + entryTypeArr + " and you have selected different one");
				return uiModel;
			}
		} else if (parentStockId == 0) {
			List<String> entryTypeArr = new ArrayList<String>();
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_OPENING);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_NEW);
			entryTypeArr.add(RetailBusinessConstants.ENTRY_TYPE_PURCHASE);
			if( !(stockBean.getEntryType() == null || entryTypeArr.contains(stockBean.getEntryType())) )  {
				log.error("parent stock id must be zero for entry type = " + entryTypeArr + " and you have selected different one");
				uiModel.setErrorMsg("parent stock id must be zero for entry type = " + entryTypeArr + " and you have selected different one");
				return uiModel;
			}
			
			// VALIDATION 2: Challan number and entry date can not be null for opening/new stock
			if(stockId == 0 && stockBean.getEntryType() == null && (stockBean.getChallanNo() == null || stockBean.getChallanDate() == null)) {
				log.error("Challan number/challan date can not be null");
				uiModel.setErrorMsg("Challan number/challan date can not be null");
				return uiModel;
			}
		}
		
		
		
		// VALIDATION 3: If bill number is specified then bill date must not be empty
		if(StringUtils.isNotBlank(stockBean.getBillNo())) {
			if(stockBean.getBillDate() == null || stockBean.getPurchasePrice() == null) {
				log.error("As bill is received then billDate/purchased price can not be null");
				uiModel.setErrorMsg("As bill is received then billDate/purchased price can not be null");
				return uiModel;
			}
		}
		
		// VALIDATION 4: If bill number is not received then bill date must be null
		if(StringUtils.isBlank(stockBean.getBillNo()) && stockBean.getBillDate() != null) {
			log.error("As bill is not received so bill date must be null");
			uiModel.setErrorMsg("As bill is not received so bill date must be null");
			return uiModel;
		}
		
		// TODO: VALIDATION 5: Entry is not possible for previous financial year
		
		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteStockEntries(UIModel uiModel) {
		if(uiModel.getBranchBean().getStockEntries() != null && uiModel.getBranchBean().getStockEntries().size() > 0 ) {
			
			List<RetailStockEntryBean> stocksBean = uiModel.getBranchBean().getStockEntries();
			List<StockEntry> stocks = new ArrayList<StockEntry>();
			for(RetailStockEntryBean stockBean : stocksBean) {
				int stockId = stockBean.getStockId(); 
				StockEntry stock = null;
				if(stockId == 0) {
					log.error("StockId can not be zero");
					uiModel.setErrorMsg("StockId can not be zero");
					return uiModel;
				} else {
					stock = retailStockEntryRepository.findOne(stockId);
					if(stock == null) {
						log.error("Incorrect stockId passed: " + stockId);
						uiModel.setErrorMsg("Incorrect stockId passed: " + stockId);
						return uiModel;
					}
				}
				
				// Rule 1: Stop stock deletion operation if the stock is already returned
				if(retailStockEntryRepository.checkIfAnyChildRecordExists(stockId) > 0) {
					log.error("Stock can not be deleted because it is partially/completely returned for stockId: " + stockId);
					uiModel.setErrorMsg("Stock can not be deleted because it is partially/completely returned for stockId: " + stockId);
					return uiModel;
					
				} else {
					retailStockEntryMappingImpl.mapBean(stockBean, stock);
					stocks.add(stock);
				}
			}
			if(stocks.size() > 0) {
				retailStockEntryRepository.save(stocks);
				if(log.isDebugEnabled()) {
					log.debug("All stocks updated with update user and updated date");
				}
				
				retailStockEntryRepository.delete(stocks);
				if(log.isDebugEnabled()) {
					log.debug("Selected stocks are deleted");
				}
			}
		}		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel getStockReturns(int materialId, Date startDate, Date endDate, int pageNo, int recordsPerPage) {
		UIModel uiModel = new UIModel();
		List<StockReturn> stocks = null;
		
		if(pageNo == 0) pageNo = 1;
		if(recordsPerPage == 0) recordsPerPage = 1000000;
		
		PageRequest pageRequest = new PageRequest(pageNo - 1, recordsPerPage, Sort.Direction.DESC, "returnDate");
		int recordCount = 0;
		if(materialId > 0) {
			stocks = retailStockReturnRepository.findStocksByMaterialId(materialId, startDate, endDate, pageRequest);
			recordCount = retailStockReturnRepository.countStocksByMaterialId(materialId, startDate, endDate);
		} else {
			stocks = retailStockReturnRepository.findStocksByDateRange(startDate, endDate, pageRequest);
			recordCount = retailStockReturnRepository.countStocksByDateRange(startDate, endDate);
		}
		
		if(stocks != null && stocks.size() > 0) {
			uiModel.setRecordCount(recordCount);
			uiModel.setPageNo(pageNo);
			uiModel.setRecordsPerPage(recordsPerPage);
			
			List<RetailStockReturnBean> stocksBean = new ArrayList<RetailStockReturnBean>();
			for(StockReturn stock : stocks) {
				RetailStockReturnBean stockBean = new RetailStockReturnBean();
				retailStockReturnMappingImpl.mapBean(stock, stockBean);
				stocksBean.add(stockBean);
			}
			
			uiModel.setBranchBean(new BranchBean());
			uiModel.getBranchBean().setStockReturns(stocksBean);
			if(log.isDebugEnabled()) {
				log.debug("Retrieved Stock-return records for the given input");
			}
		} else {
			if(log.isDebugEnabled()) {
				log.debug("No Stock-return records found for given input");
			}
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel saveStockReturns(UIModel uiModel) {
		if(uiModel.getBranchBean().getStockReturns() != null && uiModel.getBranchBean().getStockReturns().size() > 0 ) {
			
			List<RetailStockReturnBean> stocksBean = uiModel.getBranchBean().getStockReturns();
			List<StockReturn> stocks = new ArrayList<StockReturn>();
			for(RetailStockReturnBean stockBean : stocksBean) {
				int stockReturnId = stockBean.getStockReturnId();
				StockReturn stock = null;
				if(stockReturnId == 0) {
					if(log.isDebugEnabled()) {
						log.debug("New stock to be returned for stockId: " + stockBean.getStockId());
					}
					stock = new StockReturn();
				} else {
					stock = retailStockReturnRepository.findOne(stockReturnId);
					if(stock == null) {
						log.error("Incorrect stockReturnId passed: " + stockReturnId);
						uiModel.setErrorMsg("Incorrect stockReturnId passed: " + stockReturnId);
						return uiModel;
					}
				}
				
				//TODO: Need to add all validations here. Example delete stock is possible if the stock is not sold.
				// Modification of stock is possible if the sold stock is not greater than the modification qty
				retailStockReturnMappingImpl.mapBean(stockBean, stock);
				stocks.add(stock);
			}
			if(stocks.size() > 0) {
				retailStockReturnRepository.save(stocks);
				if(log.isDebugEnabled()) {
					log.debug("All stocks returned");
				}
				
				// stockBean and stocks size has to be same
				if(stocksBean.size() == stocks.size()) {
					int i = 0;
					for(StockReturn stock : stocks) {
						RetailStockReturnBean stockBean = stocksBean.get(i++);
						retailStockReturnMappingImpl.mapBean(stock, stockBean);
					}
				}
			}
		}		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteStockReturns(UIModel uiModel) {
		if(uiModel.getBranchBean().getStockReturns() != null && uiModel.getBranchBean().getStockReturns().size() > 0 ) {
			
			List<RetailStockReturnBean> stockReturnsBean = uiModel.getBranchBean().getStockReturns();
			List<StockReturn> stockReturns = new ArrayList<StockReturn>();
			for(RetailStockReturnBean stockReturnBean : stockReturnsBean) {
				int stockReturnId = stockReturnBean.getStockReturnId();
				StockReturn stockReturn = null;
				if(stockReturnId == 0) {
					log.error("StockReturnId can not be zero");
					uiModel.setErrorMsg("StockReturnId can not be zero");
					return uiModel;
				} else {
					stockReturn = retailStockReturnRepository.findOne(stockReturnId);
					if(stockReturn == null) {
						log.error("Incorrect stockReturnId passed: " + stockReturnId);
						uiModel.setErrorMsg("Incorrect stockReturnId passed: " + stockReturnId);
						return uiModel;
					}
					retailStockReturnMappingImpl.mapBean(stockReturnBean, stockReturn);
					stockReturns.add(stockReturn);
				}
				
				// Rule 1: Update the qty and availableQty of the corresponding stock if the year is not closed
				// TODO: Rule 2: If the year is already closed then insert as a new stock entry
				
				int stockId = stockReturnBean.getStockId();
				StockEntry stockEntry = retailStockEntryRepository.findOne(stockId);
				
				if(stockEntry == null) {
					log.error("There is no corresponding stock entry record for the stock return id " + stockReturnId);
					uiModel.setErrorMsg("There is no corresponding stock entry record for the stock return id " + stockReturnId);
					return uiModel;
				}
				
				if(stockEntry.getStockId() != stockReturn.getStockEntry().getStockId()) {
					log.error("Corresponding stockId  " + stockId + " for stockReturnId " + stockReturnId + " is incorrect");
					uiModel.setErrorMsg("Corresponding stockId  " + stockId + " for stockReturnId " + stockReturnId + " is incorrect");
					return uiModel;
				}
				
				BigDecimal qty = stockEntry.getQty();
				BigDecimal availableQty = stockEntry.getAvailableQty();
				
				if(qty != null && stockReturn.getQty() != null) qty = qty.add(qty);
				if(availableQty != null && stockReturn.getQty() != null) availableQty = availableQty.add(qty);
				
				stockEntry.setAvailableQty(availableQty);
				stockEntry.setQty(qty);
				retailStockEntryRepository.saveAndFlush(stockEntry);
			}
			if(stockReturns.size() > 0) {
				retailStockReturnRepository.save(stockReturns);
				if(log.isDebugEnabled()) {
					log.debug("All stock returns are updated with update user and update date");
				}
				retailStockReturnRepository.delete(stockReturns);
				if(log.isDebugEnabled()) {
					log.debug("Selected stock returns are deleted");
				}
			}
		} else {
			log.error("Incorrect details passed to delete stock returns");
			uiModel.setErrorMsg("Incorrect details passed to delete stock returns");
			return uiModel;
		}
		return uiModel;
	}
}
