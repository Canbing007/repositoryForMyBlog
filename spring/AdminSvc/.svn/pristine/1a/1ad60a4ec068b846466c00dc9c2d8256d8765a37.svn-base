package com.org.coop.bs.mapper.converter;

import org.dozer.CustomConverter;
import org.dozer.DozerConverter;
import org.dozer.Mapper;
import org.dozer.MapperAware;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.org.coop.canonical.beans.BranchRuleBean;
import com.org.coop.society.data.admin.entities.BranchMaster;
import com.org.coop.society.data.admin.entities.BranchRule;
import com.org.coop.society.data.admin.entities.RuleMaster;
import com.org.coop.society.data.admin.repositories.BranchMasterRepository;
import com.org.coop.society.data.admin.repositories.RuleMasterRepository;

@Component("branchRulesCC")
public class BranchRulesCC extends DozerConverter<BranchRule, BranchRuleBean> implements MapperAware, CustomConverter {
	
	@Autowired
	private BranchMasterRepository branchMasterRepository;
	
	@Autowired
	private RuleMasterRepository ruleMasterRepository;
	
	public BranchRulesCC() {
		super(BranchRule.class, BranchRuleBean.class);
	}
	
	public BranchRulesCC(Class prototypeA, Class prototypeB) {
		super(prototypeA, prototypeB);
	}
	
	public void setMapper(Mapper arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public BranchRule convertFrom(BranchRuleBean src, BranchRule dest) {
		if(src != null) {
				BranchMaster branch = branchMasterRepository.findOne(src.getBranchId());
				if(branch != null) {
					dest.setBranchMaster(branch);
				}
				RuleMaster rule = ruleMasterRepository.findOne(src.getRuleId());
				if(rule != null) {
					dest.setRuleMaster(rule);
				}
			}
		return dest;
	}

	@Override
	public BranchRuleBean convertTo(BranchRule src, BranchRuleBean dest) {
		if(src != null) {
			dest.setBranchId(src.getBranchMaster().getBranchId());
			dest.setBranchName(src.getBranchMaster().getBranchName());
			dest.setRuleId(src.getRuleMaster().getRuleId());
			dest.setRuleName(src.getRuleMaster().getRuleName());
			dest.setRuleDescription(src.getRuleMaster().getRuleDescription());
		}
		return dest;
	}
}
