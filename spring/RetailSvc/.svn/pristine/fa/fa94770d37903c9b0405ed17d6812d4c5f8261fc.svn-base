package com.org.coop.retail.servicehelper;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.coop.org.exception.AdminSvcCommonException;
import com.coop.org.exception.RetailMaterialManagementException;
import com.org.coop.bs.util.RetailBusinessConstants;
import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.canonical.retail.beans.MaterialGroupBean;
import com.org.coop.canonical.retail.beans.MaterialMasterBean;
import com.org.coop.retail.bs.mapper.RetailMaterialGroupMappingImpl;
import com.org.coop.retail.bs.mapper.RetailMaterialMappingImpl;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.MaterialGroup;
import com.org.coop.retail.entities.MaterialMaster;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.repositories.RetailMaterialGroupMasterRepository;
import com.org.coop.retail.repositories.RetailMaterialMasterRepository;

@Service
public class MaterialSetupServiceHelperImpl {

	private static final Logger log = Logger.getLogger(MaterialSetupServiceHelperImpl.class); 
	
	@Autowired
	private RetailMaterialGroupMasterRepository materialGroupMasterRepository;
	
	@Autowired
	private RetailMaterialMasterRepository materialMasterRepository;
	
	@Autowired
	private RetailMaterialGroupMappingImpl retailMaterialGroupMappingImpl;
	
	@Autowired
	private RetailMaterialMappingImpl retailMaterialMappingImpl;
	
	@Autowired
	private RetailBranchMasterRepository retailBranchMasterRepository;
	
	@Transactional(value="retailTransactionManager")
	public UIModel getMaterialGroup(int branchId, int materialGroupId) {
		UIModel uiModel = new UIModel();
		MaterialGroup materialGroup = null;
		List<MaterialGroup> materialGroups = null;
		// Check if the material group already exists
		if(materialGroupId > 0) {
			materialGroup = materialGroupMasterRepository.findOne(materialGroupId);
		} else {
			BranchMaster branch = retailBranchMasterRepository.findOne(branchId);
			if(branch == null) {
				String msg = "Branch does not exists for branchId: " + branchId;
				log.error(msg);
				throw new RetailMaterialManagementException(msg, RetailBusinessConstants.EXCEPTION_RETAIL_MATERIAL_MGMT);
			}
			if(branch.getParentId() > 0) {
				branchId = branch.getParentId();
			}
			materialGroups = materialGroupMasterRepository.findAllMaterialGroups(branchId);
		}
		if( materialGroupId > 0 && materialGroup == null) {
			log.error("Material Group does not exist for material group Id: " + materialGroupId);
			uiModel.setErrorMsg("Material Group does not exist for material group Id: " + materialGroupId);
			return uiModel;
		} else if(materialGroupId == 0 && (materialGroups == null || materialGroups.size() == 0) ) {
			log.error("No material groups exists");
			uiModel.setErrorMsg("No material groups exists");
			return uiModel;
		}
//		MaterialGroupBean maerialGroupBean = new MaterialGroupBean();
//		retailMaterialGroupMappingImpl.mapBean(materialGroup, maerialGroupBean);
//		
//		List<MaterialGroupBean> mgbList = new ArrayList<MaterialGroupBean>();
//		mgbList.add(maerialGroupBean);
		
		
		List<MaterialGroupBean> mgbList = new ArrayList<MaterialGroupBean>();
		
		if(materialGroupId > 0) {
			MaterialGroupBean materialGroupBean = new MaterialGroupBean();
			retailMaterialGroupMappingImpl.mapBean(materialGroup, materialGroupBean);
			mgbList.add(materialGroupBean);
		} else {
			for(MaterialGroup mg : materialGroups) {
				MaterialGroupBean materialGroupBean = new MaterialGroupBean();
				retailMaterialGroupMappingImpl.mapBean(mg, materialGroupBean);
				mgbList.add(materialGroupBean);
			}
		}
		
		uiModel.setBranchBean(new BranchBean());
		
		uiModel.getBranchBean().setMaterialGroups(mgbList);
		if(log.isDebugEnabled()) {
			log.debug("Material group list retrieved by Material group id: " + materialGroupId);
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel saveMaterialGroup(UIModel uiModel) {
		if(uiModel.getBranchBean().getMaterialGroups() != null && uiModel.getBranchBean().getMaterialGroups().size() > 0 ) {
			
			MaterialGroupBean mgb = uiModel.getBranchBean().getMaterialGroups().get(0);
			int materialGroupId = mgb.getMaterialGrpId();
			MaterialGroup materialGroup = null;
			if(materialGroupId == 0) {
				materialGroup = new MaterialGroup();
				BranchMaster branchMaster = retailBranchMasterRepository.findOne(mgb.getBranchId());
				if(branchMaster == null || branchMaster.getParentId() != 0) {
					log.debug("Branch does not exist or not a head office for branch Id: " + mgb.getBranchId());
					uiModel.setErrorMsg("Branch does not exists in our record or not a head office. Please pass branch id correctly.");
					return uiModel;
				}
				materialGroup.setBranchMaster(branchMaster);
				if(log.isDebugEnabled()) {
					log.debug("Adding new material group");
				}
			} else {
				materialGroup = materialGroupMasterRepository.findOne(materialGroupId);
				if(log.isDebugEnabled()) {
					log.debug("Modifying existing material group materialGroupId = " + materialGroupId);
				}
			}
			MaterialGroupBean materialGroupBean = uiModel.getBranchBean().getMaterialGroups().get(0);
			if(materialGroupBean.getGroupName() != null) {
				materialGroupBean.setGroupName(materialGroupBean.getGroupName().trim().toUpperCase());
			}
			retailMaterialGroupMappingImpl.mapBean(materialGroupBean, materialGroup);
			materialGroupMasterRepository.saveAndFlush(materialGroup);
			mgb.setMaterialGrpId(materialGroup.getMaterialGrpId());
		} else {
			uiModel.setErrorMsg("Material Group details not passed correctly");
		}
		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteMaterialGroup(UIModel uiModel) {
		if(uiModel.getBranchBean().getMaterialGroups() != null && uiModel.getBranchBean().getMaterialGroups().size() > 0 ) {
			
			MaterialGroupBean materialGroupBean = uiModel.getBranchBean().getMaterialGroups().get(0);
			int materialGroupId = materialGroupBean.getMaterialGrpId();
			MaterialGroup materialGroup = null;
			materialGroup = materialGroupMasterRepository.findOne(materialGroupId);
			if(materialGroup == null) {
				log.error("Material Group does not exists for materialGroupId = " + materialGroupId);
				uiModel.setErrorMsg("Material Group does not exists for materialGroupId = " + materialGroupId);
				return uiModel;
			}
			try {
				if(materialGroupMasterRepository.checkIfAnyChildRecordExists(materialGroupId) > 0) {
					log.error("Material Group is in use for materialGroupId = " + materialGroupId);
					uiModel.setErrorMsg("Material Group is in use for materialGroupId = " + materialGroupId);
					return uiModel;
				} else {
					retailMaterialGroupMappingImpl.mapBean(materialGroupBean, materialGroup);
					materialGroupMasterRepository.saveAndFlush(materialGroup);
					materialGroupMasterRepository.delete(materialGroup);
				}
			} catch (Exception e) {
				log.error("Unable to delete material group for materialGroupId = " + materialGroupId);
				uiModel.setErrorMsg("Unable to delete material group for materialGroupId = " + materialGroupId);
				return uiModel;
			}
			if(log.isDebugEnabled()) {
				log.debug("Material Group deleted for materialGroupId = " + materialGroupId);
			}
		} else {
			uiModel.setErrorMsg("Material Group can not be deleted because the detail does not passed correctly");
		}
		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel getMaterial(int branchId, int materialId) {
		UIModel uiModel = new UIModel();
		MaterialMaster material = null;
		List<MaterialMaster> materials = new ArrayList<MaterialMaster>();
		
		// Check if the material already exists
		if(materialId > 0) {
			material = materialMasterRepository.findOne(materialId);
		} else {
			BranchMaster branch = retailBranchMasterRepository.findOne(branchId);
			if(branch == null) {
				String msg = "Branch does not exists for branchId: " + branchId;
				log.error(msg);
				throw new RetailMaterialManagementException(msg, RetailBusinessConstants.EXCEPTION_RETAIL_MATERIAL_MGMT);
			}
			if(branch.getParentId() > 0) {
				branchId = branch.getParentId();
			}
			materials = materialMasterRepository.findAllMaterials(branchId);
		}
		if( materialId > 0 && material == null) {
			log.error("Material does not exist for material Id: " + materialId);
			uiModel.setErrorMsg("Material does not exist for material Id: " + materialId);
			return uiModel;
		}
		
		if(materialId == 0 && (materials == null || materials.size() == 0)) {
			log.error("No Materials exist ");
			uiModel.setErrorMsg("No Materials exist ");
			return uiModel;
		}
		List<MaterialMasterBean> mmList = new ArrayList<MaterialMasterBean>();
		
		if(materialId > 0) {
			MaterialMasterBean materialBean = new MaterialMasterBean();
			retailMaterialMappingImpl.mapBean(material, materialBean);
			mmList.add(materialBean);
		} else {
			for(MaterialMaster mm : materials) {
				MaterialMasterBean materialBean = new MaterialMasterBean();
				retailMaterialMappingImpl.mapBean(mm, materialBean);
				mmList.add(materialBean);
			}
		}
		
		uiModel.setBranchBean(new BranchBean());
		
		List<MaterialGroupBean> mgbList = new ArrayList<MaterialGroupBean>();
		mgbList.add(new MaterialGroupBean());
		
		uiModel.getBranchBean().setMaterialGroups(mgbList);
		uiModel.getBranchBean().getMaterialGroups().get(0).setMaterials(mmList);
		if(log.isDebugEnabled()) {
			log.debug("Material does not exists for Material id: " + materialId);
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel saveMaterial(UIModel uiModel) {
		if(uiModel.getBranchBean().getMaterialGroups() != null && uiModel.getBranchBean().getMaterialGroups().size() > 0 ) {
			
			MaterialMasterBean materialBean = uiModel.getBranchBean().getMaterialGroups().get(0).getMaterials().get(0);
			int materialId = materialBean.getMaterialId();
			MaterialMaster material = null;
			if(materialId == 0) {
				material = new MaterialMaster();
				MaterialGroup materialGroup = materialGroupMasterRepository.findOne(materialBean.getMaterialGrpId());
				if(materialGroup == null) {
					log.debug("Material group does not exist for material group Id: " + materialBean.getMaterialGrpId());
					uiModel.setErrorMsg("Material Group does not exists in our record. Please pass material group Id correctly.");
					return uiModel;
				}
				material.setMaterialGroup(materialGroup);
				if(log.isDebugEnabled()) {
					log.debug("Adding new material");
				}
			} else {
				material = materialMasterRepository.findOne(materialId);
				if(log.isDebugEnabled()) {
					log.debug("Modifying existing material for materialId = " + materialId);
				}
			}
			if(materialBean.getMaterialName() != null) {
				materialBean.setMaterialName(materialBean.getMaterialName().trim().toUpperCase());
			}
			retailMaterialMappingImpl.mapBean(materialBean, material);
			if(material.getQtyCheckRequiredInd() == null) material.setQtyCheckRequiredInd("Y");
			materialMasterRepository.saveAndFlush(material);
			materialBean.setMaterialId(material.getMaterialId());
		} else {
			uiModel.setErrorMsg("Material details not passed correctly");
		}
		
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel deleteMaterial(UIModel uiModel) {
		if(uiModel.getBranchBean().getMaterialGroups() != null && uiModel.getBranchBean().getMaterialGroups().size() > 0 ) {
			
			MaterialMasterBean materialBean = uiModel.getBranchBean().getMaterialGroups().get(0).getMaterials().get(0);
			int materialId = materialBean.getMaterialId();
			MaterialMaster material = null;
			material = materialMasterRepository.findOne(materialId);
			if(material == null) {
				log.error("Material does not exists for materialId = " + materialId);
				uiModel.setErrorMsg("Material does not exists for materialId = " + materialId);
				return uiModel;
			}
			try {
				if(materialMasterRepository.checkIfAnyChildRecordExists(materialId) > 0) {
					log.error("Material is in use for materialId = " + materialId);
					uiModel.setErrorMsg("Material is in use for materialId = " + materialId);
					return uiModel;
				} else {
					retailMaterialMappingImpl.mapBean(materialBean, material);
					materialMasterRepository.saveAndFlush(material);
					materialMasterRepository.delete(material);
				}
			} catch (Exception e) {
				log.error("Unable to delete material for materialId = " + materialId);
				uiModel.setErrorMsg("Unable to delete material for materialId = " + materialId);
				return uiModel;
			}
			if(log.isDebugEnabled()) {
				log.debug("Material deleted for materialId = " + materialId);
			}
		} else {
			uiModel.setErrorMsg("Material can not be deleted because the detail does not passed correctly");
		}
		
		return uiModel;
	}
	
}
