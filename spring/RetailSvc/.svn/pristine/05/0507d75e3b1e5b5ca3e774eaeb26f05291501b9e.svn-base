package com.org.coop.retail.entities;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;


/**
 * The persistent class for the branch_master database table.
 * 
 */
@Entity
@Table(name="branch_master")
@NamedQuery(name="BranchMaster.findAll", query="SELECT b FROM BranchMaster b")
@SQLDelete(sql="update branch_master set delete_ind='Y' where branch_id = ?")
@Where(clause="delete_ind is NULL")
public class BranchMaster implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
//	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="branch_id")
	private int branchId;

	@Column(name="bank_name")
	private String bankName;

	@Column(name="branch_name")
	private String branchName;

	@Column(name="context_root")
	private String contextRoot;

	@Column(name="create_date")
	private Timestamp createDate;

	@Column(name="create_user")
	private String createUser;

	@Column(name="db_name")
	private String dbName;

	@Column(name="delete_ind")
	private String deleteInd;

	@Column(name="delete_reason")
	private String deleteReason;
	
	private String email1;

	private String email2;

	@Temporal(TemporalType.DATE)
	@Column(name="end_date")
	private Date endDate;

	@Column(name="ifsc_code")
	private String ifscCode;

	@Column(name="micr_code")
	private String micrCode;

	@Column(name="parent_id")
	private int parentId;

	private String phone1;

	private String phone2;

	private String remarks;

	@Temporal(TemporalType.DATE)
	@Column(name="start_date")
	private Date startDate;

	@Column(name="update_date")
	private Timestamp updateDate;

	@Column(name="update_user")
	private String updateUser;

	//bi-directional many-to-one association to GlLedgerHrd
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<GlLedgerHrd> glLedgerHrds;
	
	//bi-directional many-to-one association to GlLedgerDtl
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<GlLedgerDtl> glLedgerDtls;

	//bi-directional many-to-one association to MaterialGroup
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<MaterialGroup> materialGroups;

	//bi-directional many-to-one association to MaterialTranHrd
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<MaterialTranHrd> materialTranHrds;
	
	//bi-directional many-to-one association to MaterialTranDtl
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<MaterialTranDtl> materialTranDtls;

	//bi-directional many-to-one association to RetailCustomerMaster
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<RetailCustomerMaster> retailCustomerMasters;

	//bi-directional many-to-one association to RetailRateChart
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	@OrderBy("materialMaster")
	private List<RetailRateChart> retailRateCharts;

	//bi-directional many-to-one association to StockEntry
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<StockEntry> stockEntries;
	
	//bi-directional many-to-one association to StockEntry
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<RetailDocument> retailDocuments;
	
	//bi-directional many-to-one association to VendorMaster
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<VendorMaster> vendorMasters;

	
	//bi-directional many-to-one association to RetailMaster
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<RetailCustomerMaster> customerMasters;
	
	//bi-directional many-to-one association to VatRegNo
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause="(end_date >= Date(now()) or end_date is NULL) and (delete_ind is NULL or delete_ind = 'N')")
	@OrderBy("startDate desc")
	private List<VatRegNo> vatRegNos;
		
	//bi-directional many-to-one association to FyClose
	@OneToMany(mappedBy="branchMaster" , fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	private List<FyClose> fyCloses;
	
	//bi-directional many-to-one association to TransactionPayment
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<TransactionPayment> transactionPayments;
	
	//bi-directional many-to-one association to CardRegister
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<CardRegister> cardRegisters;
	
	//bi-directional many-to-one association to AdvanceRegister
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<AdvanceRegister> advanceRegisters;

	//bi-directional many-to-one association to CashRegister
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<CashRegister> cashRegisters;

	//bi-directional many-to-one association to ChequeRegister
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<ChequeRegister> chequeRegisters;

	//bi-directional many-to-one association to CreditRegister
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<CreditRegister> creditRegisters;
	
	//bi-directional many-to-one association to RetailPayment
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<RetailPayment> retailPayments;

	//bi-directional many-to-one association to RetailTransaction
	@OneToMany(mappedBy="branchMaster", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<RetailTransaction> retailTransactions;
		
	public BranchMaster() {
	}

	public int getBranchId() {
		return this.branchId;
	}

	public void setBranchId(int branchId) {
		this.branchId = branchId;
	}

	public String getBankName() {
		return this.bankName;
	}

	public void setBankName(String bankName) {
		this.bankName = bankName;
	}

	public String getBranchName() {
		return this.branchName;
	}

	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}

	public String getContextRoot() {
		return this.contextRoot;
	}

	public void setContextRoot(String contextRoot) {
		this.contextRoot = contextRoot;
	}

	public Timestamp getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Timestamp createDate) {
		this.createDate = createDate;
	}

	public String getCreateUser() {
		return this.createUser;
	}

	public void setCreateUser(String createUser) {
		this.createUser = createUser;
	}

	public String getDbName() {
		return this.dbName;
	}

	public void setDbName(String dbName) {
		this.dbName = dbName;
	}

	public String getDeleteInd() {
		return this.deleteInd;
	}

	public void setDeleteInd(String deleteInd) {
		this.deleteInd = deleteInd;
	}

	public String getEmail1() {
		return this.email1;
	}

	public void setEmail1(String email1) {
		this.email1 = email1;
	}

	public String getEmail2() {
		return this.email2;
	}

	public void setEmail2(String email2) {
		this.email2 = email2;
	}

	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	public String getIfscCode() {
		return this.ifscCode;
	}

	public void setIfscCode(String ifscCode) {
		this.ifscCode = ifscCode;
	}

	public String getMicrCode() {
		return this.micrCode;
	}

	public void setMicrCode(String micrCode) {
		this.micrCode = micrCode;
	}

	public int getParentId() {
		return this.parentId;
	}

	public void setParentId(int parentId) {
		this.parentId = parentId;
	}

	public String getPhone1() {
		return this.phone1;
	}

	public void setPhone1(String phone1) {
		this.phone1 = phone1;
	}

	public String getPhone2() {
		return this.phone2;
	}

	public void setPhone2(String phone2) {
		this.phone2 = phone2;
	}

	public String getRemarks() {
		return this.remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	public Timestamp getUpdateDate() {
		return this.updateDate;
	}

	public void setUpdateDate(Timestamp updateDate) {
		this.updateDate = updateDate;
	}

	public String getUpdateUser() {
		return this.updateUser;
	}

	public void setUpdateUser(String updateUser) {
		this.updateUser = updateUser;
	}

	public FyClose addFyClos(FyClose fyClos) {
		getFyCloses().add(fyClos);
		fyClos.setBranchMaster(this);

		return fyClos;
	}

	public FyClose removeFyClos(FyClose fyClos) {
		getFyCloses().remove(fyClos);
		fyClos.setBranchMaster(null);

		return fyClos;
	}

	public List<GlLedgerHrd> getGlLedgerHrds() {
		return this.glLedgerHrds;
	}

	public void setGlLedgerHrds(List<GlLedgerHrd> glLedgerHrds) {
		this.glLedgerHrds = glLedgerHrds;
	}

	public GlLedgerHrd addGlLedgerHrd(GlLedgerHrd glLedgerHrd) {
		getGlLedgerHrds().add(glLedgerHrd);
		glLedgerHrd.setBranchMaster(this);

		return glLedgerHrd;
	}

	public GlLedgerHrd removeGlLedgerHrd(GlLedgerHrd glLedgerHrd) {
		getGlLedgerHrds().remove(glLedgerHrd);
		glLedgerHrd.setBranchMaster(null);

		return glLedgerHrd;
	}

	public List<MaterialGroup> getMaterialGroups() {
		return this.materialGroups;
	}

	public void setMaterialGroups(List<MaterialGroup> materialGroups) {
		this.materialGroups = materialGroups;
	}

	public MaterialGroup addMaterialGroup(MaterialGroup materialGroup) {
		getMaterialGroups().add(materialGroup);
		materialGroup.setBranchMaster(this);

		return materialGroup;
	}

	public MaterialGroup removeMaterialGroup(MaterialGroup materialGroup) {
		getMaterialGroups().remove(materialGroup);
		materialGroup.setBranchMaster(null);

		return materialGroup;
	}

	public List<MaterialTranHrd> getMaterialTranHrds() {
		return this.materialTranHrds;
	}

	public void setMaterialTranHrds(List<MaterialTranHrd> materialTranHrds) {
		this.materialTranHrds = materialTranHrds;
	}

	public MaterialTranHrd addMaterialTranHrd(MaterialTranHrd materialTranHrd) {
		getMaterialTranHrds().add(materialTranHrd);
		materialTranHrd.setBranchMaster(this);

		return materialTranHrd;
	}

	public MaterialTranHrd removeMaterialTranHrd(MaterialTranHrd materialTranHrd) {
		getMaterialTranHrds().remove(materialTranHrd);
		materialTranHrd.setBranchMaster(null);

		return materialTranHrd;
	}

	public List<RetailCustomerMaster> getRetailCustomerMasters() {
		return this.retailCustomerMasters;
	}

	public void setRetailCustomerMasters(List<RetailCustomerMaster> retailCustomerMasters) {
		this.retailCustomerMasters = retailCustomerMasters;
	}

	public RetailCustomerMaster addRetailCustomerMaster(RetailCustomerMaster retailCustomerMaster) {
		getRetailCustomerMasters().add(retailCustomerMaster);
		retailCustomerMaster.setBranchMaster(this);

		return retailCustomerMaster;
	}

	public RetailCustomerMaster removeRetailCustomerMaster(RetailCustomerMaster retailCustomerMaster) {
		getRetailCustomerMasters().remove(retailCustomerMaster);
		retailCustomerMaster.setBranchMaster(null);

		return retailCustomerMaster;
	}

	public RetailDocument addRetailDocument(RetailDocument retailDocument) {
		getRetailDocuments().add(retailDocument);
		retailDocument.setBranchMaster(this);

		return retailDocument;
	}

	public RetailDocument removeRetailDocument(RetailDocument retailDocument) {
		getRetailDocuments().remove(retailDocument);
		retailDocument.setBranchMaster(null);

		return retailDocument;
	}

	public List<RetailRateChart> getRetailRateCharts() {
		return this.retailRateCharts;
	}

	public void setRetailRateCharts(List<RetailRateChart> retailRateCharts) {
		this.retailRateCharts = retailRateCharts;
	}

	public RetailRateChart addRetailRateChart(RetailRateChart retailRateChart) {
		getRetailRateCharts().add(retailRateChart);
		retailRateChart.setBranchMaster(this);

		return retailRateChart;
	}

	public RetailRateChart removeRetailRateChart(RetailRateChart retailRateChart) {
		getRetailRateCharts().remove(retailRateChart);
		retailRateChart.setBranchMaster(null);

		return retailRateChart;
	}

	public List<StockEntry> getStockEntries() {
		return this.stockEntries;
	}

	public void setStockEntries(List<StockEntry> stockEntries) {
		this.stockEntries = stockEntries;
	}

	public StockEntry addStockEntry(StockEntry stockEntry) {
		getStockEntries().add(stockEntry);
		stockEntry.setBranchMaster(this);

		return stockEntry;
	}

	public StockEntry removeStockEntry(StockEntry stockEntry) {
		getStockEntries().remove(stockEntry);
		stockEntry.setBranchMaster(null);

		return stockEntry;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + branchId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		BranchMaster other = (BranchMaster) obj;
		if (branchId != other.branchId)
			return false;
		return true;
	}

	@PreUpdate
	public void updateTimeStamps() {
		long currentTime = System.currentTimeMillis();
	    updateDate = new Timestamp(currentTime);
	    if (createDate == null) {
	    	createDate = new Timestamp(currentTime);
	    }
	}

	public List<RetailDocument> getRetailDocuments() {
		return retailDocuments;
	}

	public void setRetailDocuments(List<RetailDocument> retailDocuments) {
		this.retailDocuments = retailDocuments;
	}

	public List<VendorMaster> getVendorMasters() {
		return vendorMasters;
	}

	public void setVendorMasters(List<VendorMaster> vendorMasters) {
		this.vendorMasters = vendorMasters;
	}

	public List<RetailCustomerMaster> getCustomerMasters() {
		return customerMasters;
	}

	public void setCustomerMasters(List<RetailCustomerMaster> customerMasters) {
		this.customerMasters = customerMasters;
	}

	public List<VatRegNo> getVatRegNos() {
		return vatRegNos;
	}

	public void setVatRegNos(List<VatRegNo> vatRegNos) {
		this.vatRegNos = vatRegNos;
	}

	public String getDeleteReason() {
		return deleteReason;
	}

	public void setDeleteReason(String deleteReason) {
		this.deleteReason = deleteReason;
	}

	public List<FyClose> getFyCloses() {
		return fyCloses;
	}

	public void setFyCloses(List<FyClose> fyCloses) {
		this.fyCloses = fyCloses;
	}
	public List<TransactionPayment> getTransactionPayments() {
		return this.transactionPayments;
	}

	public void setTransactionPayments(List<TransactionPayment> transactionPayments) {
		this.transactionPayments = transactionPayments;
	}

	public TransactionPayment addTransactionPayment(TransactionPayment transactionPayment) {
		getTransactionPayments().add(transactionPayment);
		transactionPayment.setBranchMaster(this);

		return transactionPayment;
	}

	public TransactionPayment removeTransactionPayment(TransactionPayment transactionPayment) {
		getTransactionPayments().remove(transactionPayment);
		transactionPayment.setBranchMaster(null);

		return transactionPayment;
	}
	public List<AdvanceRegister> getAdvanceRegisters() {
		return this.advanceRegisters;
	}

	public void setAdvanceRegisters(List<AdvanceRegister> advanceRegisters) {
		this.advanceRegisters = advanceRegisters;
	}

	public AdvanceRegister addAdvanceRegister(AdvanceRegister advanceRegister) {
		getAdvanceRegisters().add(advanceRegister);
		advanceRegister.setBranchMaster(this);

		return advanceRegister;
	}

	public AdvanceRegister removeAdvanceRegister(AdvanceRegister advanceRegister) {
		getAdvanceRegisters().remove(advanceRegister);
		advanceRegister.setBranchMaster(null);

		return advanceRegister;
	}

	public List<CardRegister> getCardRegisters() {
		return this.cardRegisters;
	}

	public void setCardRegisters(List<CardRegister> cardRegisters) {
		this.cardRegisters = cardRegisters;
	}

	public CardRegister addCardRegister(CardRegister cardRegister) {
		getCardRegisters().add(cardRegister);
		cardRegister.setBranchMaster(this);

		return cardRegister;
	}

	public CardRegister removeCardRegister(CardRegister cardRegister) {
		getCardRegisters().remove(cardRegister);
		cardRegister.setBranchMaster(null);

		return cardRegister;
	}

	public List<CashRegister> getCashRegisters() {
		return this.cashRegisters;
	}

	public void setCashRegisters(List<CashRegister> cashRegisters) {
		this.cashRegisters = cashRegisters;
	}

	public CashRegister addCashRegister(CashRegister cashRegister) {
		getCashRegisters().add(cashRegister);
		cashRegister.setBranchMaster(this);

		return cashRegister;
	}

	public CashRegister removeCashRegister(CashRegister cashRegister) {
		getCashRegisters().remove(cashRegister);
		cashRegister.setBranchMaster(null);

		return cashRegister;
	}

	public List<ChequeRegister> getChequeRegisters() {
		return this.chequeRegisters;
	}

	public void setChequeRegisters(List<ChequeRegister> chequeRegisters) {
		this.chequeRegisters = chequeRegisters;
	}

	public ChequeRegister addChequeRegister(ChequeRegister chequeRegister) {
		getChequeRegisters().add(chequeRegister);
		chequeRegister.setBranchMaster(this);

		return chequeRegister;
	}

	public ChequeRegister removeChequeRegister(ChequeRegister chequeRegister) {
		getChequeRegisters().remove(chequeRegister);
		chequeRegister.setBranchMaster(null);

		return chequeRegister;
	}

	public List<CreditRegister> getCreditRegisters() {
		return this.creditRegisters;
	}

	public void setCreditRegisters(List<CreditRegister> creditRegisters) {
		this.creditRegisters = creditRegisters;
	}

	public CreditRegister addCreditRegister(CreditRegister creditRegister) {
		getCreditRegisters().add(creditRegister);
		creditRegister.setBranchMaster(this);

		return creditRegister;
	}

	public CreditRegister removeCreditRegister(CreditRegister creditRegister) {
		getCreditRegisters().remove(creditRegister);
		creditRegister.setBranchMaster(null);

		return creditRegister;
	}
	public List<RetailPayment> getRetailPayments() {
		return this.retailPayments;
	}

	public void setRetailPayments(List<RetailPayment> retailPayments) {
		this.retailPayments = retailPayments;
	}

	public RetailPayment addRetailPayment(RetailPayment retailPayment) {
		getRetailPayments().add(retailPayment);
		retailPayment.setBranchMaster(this);

		return retailPayment;
	}

	public RetailPayment removeRetailPayment(RetailPayment retailPayment) {
		getRetailPayments().remove(retailPayment);
		retailPayment.setBranchMaster(null);

		return retailPayment;
	}
	public List<RetailTransaction> getRetailTransactions() {
		return this.retailTransactions;
	}

	public void setRetailTransactions(List<RetailTransaction> retailTransactions) {
		this.retailTransactions = retailTransactions;
	}

	public RetailTransaction addRetailTransaction(RetailTransaction retailTransaction) {
		getRetailTransactions().add(retailTransaction);
		retailTransaction.setBranchMaster(this);

		return retailTransaction;
	}

	public RetailTransaction removeRetailTransaction(RetailTransaction retailTransaction) {
		getRetailTransactions().remove(retailTransaction);
		retailTransaction.setBranchMaster(null);

		return retailTransaction;
	}
	public List<GlLedgerDtl> getGlLedgerDtls() {
		return this.glLedgerDtls;
	}

	public void setGlLedgerDtls(List<GlLedgerDtl> glLedgerDtls) {
		this.glLedgerDtls = glLedgerDtls;
	}

	public GlLedgerDtl addGlLedgerDtl(GlLedgerDtl glLedgerDtl) {
		getGlLedgerDtls().add(glLedgerDtl);
		glLedgerDtl.setBranchMaster(this);

		return glLedgerDtl;
	}

	public GlLedgerDtl removeGlLedgerDtl(GlLedgerDtl glLedgerDtl) {
		getGlLedgerDtls().remove(glLedgerDtl);
		glLedgerDtl.setBranchMaster(null);

		return glLedgerDtl;
	}
	public List<MaterialTranDtl> getMaterialTranDtls() {
		return this.materialTranDtls;
	}

	public void setMaterialTranDtls(List<MaterialTranDtl> materialTranDtls) {
		this.materialTranDtls = materialTranDtls;
	}

	public MaterialTranDtl addMaterialTranDtl(MaterialTranDtl materialTranDtl) {
		getMaterialTranDtls().add(materialTranDtl);
		materialTranDtl.setBranchMaster(this);

		return materialTranDtl;
	}

	public MaterialTranDtl removeMaterialTranDtl(MaterialTranDtl materialTranDtl) {
		getMaterialTranDtls().remove(materialTranDtl);
		materialTranDtl.setBranchMaster(null);

		return materialTranDtl;
	}
}