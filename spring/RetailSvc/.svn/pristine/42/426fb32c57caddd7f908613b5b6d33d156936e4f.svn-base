package com.org.coop.retail.entities;

import java.io.Serializable;

import javax.persistence.*;

import org.hibernate.annotations.SQLDelete;
import org.hibernate.annotations.Where;

import java.sql.Timestamp;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;


/**
 * The persistent class for the transaction_payment database table.
 * 
 */
@Entity
@Table(name="transaction_payment")
@NamedQuery(name="TransactionPayment.findAll", query="SELECT t FROM TransactionPayment t")
@SQLDelete(sql="update transaction_payment set delete_ind='Y' where payment_id = ?")
@Where(clause="delete_ind is NULL")
public class TransactionPayment implements Serializable {
	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name="payment_id")
	private int paymentId;

	@Temporal(TemporalType.DATE)
	@Column(name="action_date")
	private Date actionDate;

	@Column(name="paid_amt")
	private BigDecimal paidAmt;

	@Column(name="create_date")
	private Timestamp createDate;

	@Column(name="create_user")
	private String createUser;

	@Column(name="delete_ind")
	private String deleteInd;

	@Column(name="delete_reason")
	private String deleteReason;

	@Column(name="passing_auth_ind")
	private String passingAuthInd;

	@Column(name="passing_auth_remark")
	private String passingAuthRemark;

	@Column(name="payment_type")
	private String paymentType;

	@Column(name="update_date")
	private Timestamp updateDate;

	@Column(name="update_user")
	private String updateUser;

	//bi-directional many-to-one association to AdvanceRegister
	@OneToMany(mappedBy="transactionPayment", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<AdvanceRegister> advanceRegisters;

	//bi-directional many-to-one association to CardRegister
	@OneToMany(mappedBy="transactionPayment", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<CardRegister> cardRegisters;

	//bi-directional many-to-one association to CashRegister
	@OneToMany(mappedBy="transactionPayment", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<CashRegister> cashRegisters;

	//bi-directional many-to-one association to ChequeRegister
	@OneToMany(mappedBy="transactionPayment", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<ChequeRegister> chequeRegisters;

	//bi-directional many-to-one association to CreditRegister
	@OneToMany(mappedBy="transactionPayment", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<CreditRegister> creditRegisters;

	//bi-directional many-to-one association to BranchMaster
	@ManyToOne
	@JoinColumn(name="branch_id")
	private BranchMaster branchMaster;

	//bi-directional many-to-one association to GlLedgerHrd
	@ManyToOne
	@JoinColumn(name="gl_tran_id")
	private GlLedgerHrd glLedgerHrd;

	//bi-directional many-to-one association to RetailPayment
	@OneToMany(mappedBy="transactionPayment", fetch = FetchType.LAZY, cascade={CascadeType.PERSIST,CascadeType.MERGE,CascadeType.REFRESH})
	@Where(clause = "delete_ind is null")
	private List<RetailPayment> retailPayments;

	public TransactionPayment() {
	}

	public int getPaymentId() {
		return this.paymentId;
	}

	public void setPaymentId(int paymentId) {
		this.paymentId = paymentId;
	}

	public Date getActionDate() {
		return this.actionDate;
	}

	public void setActionDate(Date actionDate) {
		this.actionDate = actionDate;
	}

	public BigDecimal getPaidAmt() {
		return paidAmt;
	}

	public void setPaidAmt(BigDecimal paidAmt) {
		this.paidAmt = paidAmt;
	}

	public Timestamp getCreateDate() {
		return this.createDate;
	}

	public void setCreateDate(Timestamp createDate) {
		this.createDate = createDate;
	}

	public String getCreateUser() {
		return this.createUser;
	}

	public void setCreateUser(String createUser) {
		this.createUser = createUser;
	}

	public String getDeleteInd() {
		return this.deleteInd;
	}

	public void setDeleteInd(String deleteInd) {
		this.deleteInd = deleteInd;
	}

	public String getDeleteReason() {
		return this.deleteReason;
	}

	public void setDeleteReason(String deleteReason) {
		this.deleteReason = deleteReason;
	}

	public String getPassingAuthInd() {
		return this.passingAuthInd;
	}

	public void setPassingAuthInd(String passingAuthInd) {
		this.passingAuthInd = passingAuthInd;
	}

	public String getPassingAuthRemark() {
		return this.passingAuthRemark;
	}

	public void setPassingAuthRemark(String passingAuthRemark) {
		this.passingAuthRemark = passingAuthRemark;
	}

	public String getPaymentType() {
		return this.paymentType;
	}

	public void setPaymentType(String paymentType) {
		this.paymentType = paymentType;
	}

	public Timestamp getUpdateDate() {
		return this.updateDate;
	}

	public void setUpdateDate(Timestamp updateDate) {
		this.updateDate = updateDate;
	}

	public String getUpdateUser() {
		return this.updateUser;
	}

	public void setUpdateUser(String updateUser) {
		this.updateUser = updateUser;
	}

	public List<AdvanceRegister> getAdvanceRegisters() {
		return this.advanceRegisters;
	}

	public void setAdvanceRegisters(List<AdvanceRegister> advanceRegisters) {
		this.advanceRegisters = advanceRegisters;
	}

	public AdvanceRegister addAdvanceRegister(AdvanceRegister advanceRegister) {
		getAdvanceRegisters().add(advanceRegister);
		advanceRegister.setTransactionPayment(this);

		return advanceRegister;
	}

	public AdvanceRegister removeAdvanceRegister(AdvanceRegister advanceRegister) {
		getAdvanceRegisters().remove(advanceRegister);
		advanceRegister.setTransactionPayment(null);

		return advanceRegister;
	}

	public List<CardRegister> getCardRegisters() {
		return this.cardRegisters;
	}

	public void setCardRegisters(List<CardRegister> cardRegisters) {
		this.cardRegisters = cardRegisters;
	}

	public CardRegister addCardRegister(CardRegister cardRegister) {
		getCardRegisters().add(cardRegister);
		cardRegister.setTransactionPayment(this);

		return cardRegister;
	}

	public CardRegister removeCardRegister(CardRegister cardRegister) {
		getCardRegisters().remove(cardRegister);
		cardRegister.setTransactionPayment(null);

		return cardRegister;
	}

	public List<CashRegister> getCashRegisters() {
		return this.cashRegisters;
	}

	public void setCashRegisters(List<CashRegister> cashRegisters) {
		this.cashRegisters = cashRegisters;
	}

	public CashRegister addCashRegister(CashRegister cashRegister) {
		getCashRegisters().add(cashRegister);
		cashRegister.setTransactionPayment(this);

		return cashRegister;
	}

	public CashRegister removeCashRegister(CashRegister cashRegister) {
		getCashRegisters().remove(cashRegister);
		cashRegister.setTransactionPayment(null);

		return cashRegister;
	}

	public List<ChequeRegister> getChequeRegisters() {
		return this.chequeRegisters;
	}

	public void setChequeRegisters(List<ChequeRegister> chequeRegisters) {
		this.chequeRegisters = chequeRegisters;
	}

	public ChequeRegister addChequeRegister(ChequeRegister chequeRegister) {
		getChequeRegisters().add(chequeRegister);
		chequeRegister.setTransactionPayment(this);

		return chequeRegister;
	}

	public ChequeRegister removeChequeRegister(ChequeRegister chequeRegister) {
		getChequeRegisters().remove(chequeRegister);
		chequeRegister.setTransactionPayment(null);

		return chequeRegister;
	}

	public List<CreditRegister> getCreditRegisters() {
		return this.creditRegisters;
	}

	public void setCreditRegisters(List<CreditRegister> creditRegisters) {
		this.creditRegisters = creditRegisters;
	}

	public CreditRegister addCreditRegister(CreditRegister creditRegister) {
		getCreditRegisters().add(creditRegister);
		creditRegister.setTransactionPayment(this);

		return creditRegister;
	}

	public CreditRegister removeCreditRegister(CreditRegister creditRegister) {
		getCreditRegisters().remove(creditRegister);
		creditRegister.setTransactionPayment(null);

		return creditRegister;
	}

	public BranchMaster getBranchMaster() {
		return this.branchMaster;
	}

	public void setBranchMaster(BranchMaster branchMaster) {
		this.branchMaster = branchMaster;
	}

	public GlLedgerHrd getGlLedgerHrd() {
		return this.glLedgerHrd;
	}

	public void setGlLedgerHrd(GlLedgerHrd glLedgerHrd) {
		this.glLedgerHrd = glLedgerHrd;
	}
	@PreUpdate
	public void updateTimeStamps() {
		long currentTime = System.currentTimeMillis();
	    updateDate = new Timestamp(currentTime);
	    if (createDate == null) {
	    	createDate = new Timestamp(currentTime);
	    }
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + paymentId;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TransactionPayment other = (TransactionPayment) obj;
		if (paymentId != other.paymentId)
			return false;
		return true;
	}
	
	public List<RetailPayment> getRetailPayments() {
		return this.retailPayments;
	}

	public void setRetailPayments(List<RetailPayment> retailPayments) {
		this.retailPayments = retailPayments;
	}

	public RetailPayment addRetailPayment(RetailPayment retailPayment) {
		getRetailPayments().add(retailPayment);
		retailPayment.setTransactionPayment(this);

		return retailPayment;
	}

	public RetailPayment removeRetailPayment(RetailPayment retailPayment) {
		getRetailPayments().remove(retailPayment);
		retailPayment.setTransactionPayment(null);

		return retailPayment;
	}

}