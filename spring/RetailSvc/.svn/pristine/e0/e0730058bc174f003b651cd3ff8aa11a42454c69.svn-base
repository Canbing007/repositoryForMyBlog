package com.org.coop.retail.servicehelper;

import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.RetailStockEntryBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.RetailStockEntryMappingImpl;
import com.org.coop.retail.entities.StockEntry;
import com.org.coop.retail.repositories.RetailStockEntryRepository;

@Service
public class RetailStockManagementServiceHelperImpl {

	private static final Logger log = Logger.getLogger(RetailStockManagementServiceHelperImpl.class); 
	
	@Autowired
	private RetailStockEntryRepository retailStockEntryRepository;
	
	@Autowired
	private RetailStockEntryMappingImpl retailStockEntryMappingImpl;
	
	@Transactional(value="retailTransactionManager")
	public UIModel getStockEntries(int branchId, int vendorId, int materialId, int pageNo, int recordsPerPage, String challanNo, String billNo) {
		UIModel uiModel = new UIModel();
		List<StockEntry> stocks = null;
		
		if(pageNo == 0) pageNo = 1;
		if(recordsPerPage == 0) recordsPerPage = 1000000;
		
		PageRequest pageRequest = new PageRequest(pageNo - 1, recordsPerPage, Sort.Direction.DESC, "entryDate");
		int recordCount = 0;
		if(branchId > 0) {
			if(vendorId > 0) {
				stocks = retailStockEntryRepository.findByVendorId(branchId, vendorId, pageRequest);
				recordCount = retailStockEntryRepository.countByVendorId(branchId, vendorId);
			} else if(materialId > 0) {
				stocks = retailStockEntryRepository.findByMaterialId(branchId, materialId, pageRequest);
				recordCount = retailStockEntryRepository.countByMaterialId(branchId, materialId);
			} else {
				stocks = retailStockEntryRepository.findByBranchId(branchId, pageRequest);
				recordCount = retailStockEntryRepository.countByBranchId(branchId);
			}
		}
		
		if(stocks != null && stocks.size() > 0) {
			uiModel.setRecordCount(recordCount);
			uiModel.setPageNo(pageNo);
			uiModel.setRecordsPerPage(recordsPerPage);
			
			List<RetailStockEntryBean> stocksBean = new ArrayList<RetailStockEntryBean>();
			for(StockEntry stock : stocks) {
				RetailStockEntryBean stockBean = new RetailStockEntryBean();
				retailStockEntryMappingImpl.mapBean(stock, stockBean);
				stocksBean.add(stockBean);
			}
			
			uiModel.setBranchBean(new BranchBean());
			uiModel.getBranchBean().setStockEntries(stocksBean);
		} else {
			if(log.isDebugEnabled()) {
				log.debug("No Stock-in records found for given input");
			}
		}
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel saveStockEntries(UIModel uiModel) {
		if(uiModel.getBranchBean().getStockEntries() != null && uiModel.getBranchBean().getStockEntries().size() > 0 ) {
			
			List<RetailStockEntryBean> stocksBean = uiModel.getBranchBean().getStockEntries();
			List<StockEntry> stocks = new ArrayList<StockEntry>();
			for(RetailStockEntryBean stockBean : stocksBean) {
				int stockId = stockBean.getStockId(); 
				StockEntry stock = null;
				if(stockId == 0) {
					if(log.isDebugEnabled()) {
						log.debug("New stock to be added for material: " + stockBean.getMaterialId());
					}
					stock = new StockEntry();
				} else {
					stock = retailStockEntryRepository.findOne(stockId);
					if(stock == null) {
						log.error("Incorrect stockId passed: " + stockId);
						uiModel.setErrorMsg("Incorrect stockId passed: " + stockId);
						return uiModel;
					}
				}
				
				//TODO: Need to add all validations here. Example delete stock is possible if the stock is not sold.
				// Modification of stock is possible if the sold stock is not greater than the modification qty
				retailStockEntryMappingImpl.mapBean(stockBean, stock);
				stocks.add(stock);
			}
			if(stocks.size() > 0) {
				retailStockEntryRepository.save(stocks);
				if(log.isDebugEnabled()) {
					log.debug("All stocks added");
				}
				
				// stockBean and stocks size has to be same
				if(stocksBean.size() == stocks.size()) {
					int i = 0;
					for(StockEntry stock : stocks) {
						RetailStockEntryBean stockBean = stocksBean.get(i++);
						retailStockEntryMappingImpl.mapBean(stock, stockBean);
					}
				}
			}
		}		
		return uiModel;
	}
	
}
