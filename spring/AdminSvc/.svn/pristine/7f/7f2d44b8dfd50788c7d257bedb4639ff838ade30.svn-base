package com.org.coop.admin.servicehelper;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.coop.org.exception.AdminSvcCommonException;
import com.org.coop.bs.util.BusinessConstants;
import com.org.coop.society.data.admin.entities.BranchRule;
import com.org.coop.society.data.admin.entities.SecurityQuestion;
import com.org.coop.society.data.admin.entities.User;
import com.org.coop.society.data.admin.repositories.SecurityQuestionRepository;
import com.org.coop.society.data.admin.repositories.UserAdminRepository;

@Service
@PropertySource("classpath:adminSvcBS.properties")
public class CommonAdminServiceHelperImpl {
	private static final Logger log = Logger.getLogger(AdminLoginServiceHelperImpl.class); 
	
	@Autowired
	private Environment env;
	
	@Autowired
	private SecurityQuestionRepository securityQuestionRepository;
	
	@Autowired
	private UserAdminRepository userAdminRepository;
	
	@Transactional(value="adminTransactionManager")
	public List<SecurityQuestion> getAllSecurityQuestions() {
		return securityQuestionRepository.findAll();
	}
	
	@Transactional(value="adminTransactionManager")
	public Map<String, String> getBranchRules(String username) {
		User user = userAdminRepository.findByUserName(username);
		Map<String, String> branchRuleMap = new HashMap<String, String>();
		for(BranchRule branchRule: user.getBranchMaster().getBranchRules()) {
			branchRuleMap.put(branchRule.getRuleMaster().getRuleName(), branchRule.getRuleValue());
		}
		log.debug("Rule setup for the branch is : " + branchRuleMap);
		return branchRuleMap;
	}
	
	public String getBranchRuleValueByKey(String username, String key) {
		Map<String, String> branchRulesMap = getBranchRules(username);
		String value = branchRulesMap.get(key);
		log.debug("Rule setup for the key " + key + " is : " + value);
		return value;
	}
	
	public Date getDateByString(String dateInString) {
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
		Date date = null;
		try {
			date = formatter.parse(dateInString);
			log.debug("Date is : " + date);
		} catch (Exception e) {
			log.error("Error occured in the input date: " + dateInString, e);
		}
		return date;
	}
	
	/**
	 * This method sends email to customer. For multiple to addresses, comma separated email id to be passed
	 * @param gmailId
	 * @param gmailPassword
	 * @param to
	 * @param from
	 * @param subject
	 * @param body
	 */
	public void sendEmail(String gmailId, String gmailPassword, String to, String subject, String body) {
//		if(StringUtils.isBlank(gmailId)) gmailId = env.getProperty("email.username");
//		if(StringUtils.isBlank(gmailPassword)) gmailPassword = env.getProperty("email.password");
		//*********************************************
		// VALIDATION 1: Username, Password, To, From, Subject and Body can not be null
		//**********************************************
		if("false".equalsIgnoreCase(env.getProperty("email.service.disabled"))) {
			if(log.isDebugEnabled()) {
				log.debug("Email is disabled");
			}
			return;
		}
		if(StringUtils.isBlank(gmailId) || StringUtils.isBlank(gmailPassword) || StringUtils.isBlank(to) 
				|| StringUtils.isBlank(subject) || StringUtils.isBlank(body)) {
			String errorMsg = "From Gmail Id, Gmail Password, To, Subject and Body can not be blank";
			log.error(errorMsg);
			throw new AdminSvcCommonException(errorMsg, BusinessConstants.EXCEPTION_NOTIFICATION);
		}
		
		Properties javaMailProperties = new Properties();
		javaMailProperties.put("mail.smtp.host", env.getProperty("email.host"));
		javaMailProperties.put("mail.smtp.port", env.getProperty("email.port"));
		javaMailProperties.put("mail.transport.protocol", env.getProperty("email.transport.protocol"));
		javaMailProperties.put("mail.smtp.auth", env.getProperty("email.smtp.auth"));
		javaMailProperties.put("mail.smtp.starttls.enable", env.getProperty("email.smtp.starttls.enable"));
		javaMailProperties.put("mail.smtp.starttls.required", env.getProperty("email.smtp.starttls.required"));
		javaMailProperties.put("mail.debug", env.getProperty("email.debug"));
		
		final String uName = gmailId;
		final String pwd = gmailPassword;
		 // Get the Session object.
	      Session session = Session.getInstance(javaMailProperties,
			      new javax.mail.Authenticator() {
			         protected PasswordAuthentication getPasswordAuthentication() {
			            return new PasswordAuthentication(uName, pwd);
			         }
			      });

	      try {
	         // Create a default MimeMessage object.
	         Message message = new MimeMessage(session);

	         // Set From: header field of the header.
	         message.setFrom(new InternetAddress(gmailId));

	         // Set To: header field of the header.
	         if(StringUtils.isNotBlank(to)) {
	        	 String t[] = to.split(",");
	        	 for(String toAddr : t) {
	        		 validateEmail(toAddr);
	        		 message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toAddr));
	        	 }
	         }
	         

	         // Set Subject: header field
	         message.setSubject(subject);

	         // Now set the actual message
	         message.setText(body);

	         // Send message
	         Transport.send(message);

	         if(log.isDebugEnabled()) {
	        	 log.debug("Sent message successfully to: " + to + " Subject: " + subject);
	         }

	      } catch (MessagingException e) {
	    	  String errorMsg = "Email sending failed to " + to;
	    	  log.error(errorMsg);
	          throw new RuntimeException(e);
	      }
	}
	
	public void validatePhoneNumber(String phoneNo) {
		boolean isPhoneValid = false;
        //validate phone numbers of format "1234567890"
        if (phoneNo.matches("\\d{10}")) isPhoneValid = true;
        //validating phone number with -, . or spaces
        else if(phoneNo.matches("\\d{3}[-\\.\\s]\\d{3}[-\\.\\s]\\d{4}")) isPhoneValid = true;
        //validating phone number with extension length from 3 to 5
        else if(phoneNo.matches("\\d{3}-\\d{3}-\\d{4}\\s(x|(ext))\\d{3,5}")) isPhoneValid = true;
        //validating phone number where area code is in braces ()
        else if(phoneNo.matches("\\(\\d{3}\\)-\\d{3}-\\d{4}")) isPhoneValid = true;
        //return false if nothing matches the input
        else isPhoneValid = false;
        
        if(!isPhoneValid) {
        	String msg = "Invalid phone number: " + phoneNo;
			log.error(msg);
			throw new AdminSvcCommonException(msg, BusinessConstants.EXCEPTION_COMMON);
        }
         
    }
	
	public void validateEmail(String email) {
		boolean isValidEmail = false;
		String EMAIL_PATTERN = 
				"^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@"
				+ "[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
		Pattern pattern = Pattern.compile(EMAIL_PATTERN);
		Matcher matcher = pattern.matcher(email);
		isValidEmail = matcher.matches();
		
        if(!isValidEmail) {
        	String msg = "Invalid Email Id: " + email;
			log.error(msg);
			throw new AdminSvcCommonException(msg, BusinessConstants.EXCEPTION_COMMON);
        }
         
    }
}
