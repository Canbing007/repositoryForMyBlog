package com.org.coop.retail.servicehelper;

import java.io.ByteArrayInputStream;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.org.coop.canonical.beans.BranchBean;
import com.org.coop.canonical.beans.DocumentBean;
import com.org.coop.canonical.beans.UIModel;
import com.org.coop.retail.bs.mapper.RetailDocumentMappingImpl;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.RetailDocument;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.repositories.RetailDocumentRepository;

@Service
public class RetailDocumentServiceHelperImpl {

	private static final Logger log = Logger.getLogger(RetailDocumentServiceHelperImpl.class); 
	
	@Autowired
	private RetailBranchMasterRepository branchMasterRepository;
	
	@Autowired
	private RetailDocumentMappingImpl retailDocumentMappingImpl;
	
	@Autowired
	private RetailDocumentRepository retailDocumentRepository;
	
	@Transactional(value="retailTransactionManager")
	public UIModel getDocumentByDocId(int documentId) {
		UIModel uiModel = new UIModel();
		// Check if the document already exists
		RetailDocument document = retailDocumentRepository.findOne(documentId);
		if(document == null) {
			uiModel.setErrorMsg("Document does not exist for document Id: " + documentId);
			return uiModel;
		}
		BranchBean branchBean = new BranchBean();
		DocumentBean documentBean = new DocumentBean();
		List<DocumentBean> documents = new ArrayList<DocumentBean>();
		documents.add(documentBean);
		branchBean.setDocuments(documents);
		
		retailDocumentMappingImpl.mapBean(document, documentBean);
		uiModel.setBranchBean(branchBean);
		branchBean.setBranchId(document.getBranchMaster().getBranchId());
		
		ByteArrayInputStream bis = new ByteArrayInputStream(document.getDocument());
		documentBean.setDocument(bis);
		
		log.debug("Branch details has been retrieved from database for branchId: " + documentId);
		return uiModel;
	}
	
	@Transactional(value="retailTransactionManager")
	public UIModel saveDocument(UIModel uiModel) {
		try {
			RetailDocument retailDoc = new RetailDocument();
			DocumentBean docBean = uiModel.getBranchBean().getDocuments().get(0);
			
			BranchMaster branch = branchMasterRepository.findOne(docBean.getBranchId());
			if(branch == null) {
				uiModel.setErrorMsg("Branch does not exists for branch id: " + docBean.getBranchId());
				log.error("Branch does not exists for branch id: " + docBean.getBranchId());
				return uiModel;
			}
			byte[] docByte = IOUtils.toByteArray(docBean.getDocument());
			retailDocumentMappingImpl.mapBean(docBean, retailDoc);
			retailDoc.setDocument(docByte);
			retailDoc.setBranchMaster(branch);
			
			retailDocumentRepository.saveAndFlush(retailDoc);
			docBean.setDocId(retailDoc.getDocId());
		} catch (Exception e) {
			log.error("Error while uploading document into database", e);
			uiModel.setErrorMsg("Error while uploading document into database");
		}
		return uiModel;
	}
	
}
