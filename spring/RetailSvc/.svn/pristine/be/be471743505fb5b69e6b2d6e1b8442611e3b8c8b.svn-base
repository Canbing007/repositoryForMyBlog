package com.org.coop.retail.bs.mapper.converter;

import org.apache.log4j.Logger;
import org.dozer.CustomConverter;
import org.dozer.DozerConverter;
import org.dozer.Mapper;
import org.dozer.MapperAware;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.coop.org.exception.RetailException;
import com.org.coop.bs.util.RetailBusinessConstants;
import com.org.coop.canonical.retail.beans.MaterialTranHrdBean;
import com.org.coop.retail.entities.BranchMaster;
import com.org.coop.retail.entities.Customer;
import com.org.coop.retail.entities.MaterialTranHrd;
import com.org.coop.retail.entities.VendorMaster;
import com.org.coop.retail.repositories.CustomerRepository;
import com.org.coop.retail.repositories.RetailBranchMasterRepository;
import com.org.coop.retail.repositories.RetailVendorMasterRepository;

@Component("retailMaterialTranHrdCC")
public class RetailMaterialTranHrdCC extends DozerConverter<MaterialTranHrdBean, MaterialTranHrd> implements MapperAware, CustomConverter {
	
	private static final Logger log = Logger.getLogger(RetailMaterialTranHrdCC.class); 
	
	@Autowired
	private RetailBranchMasterRepository retailBranchMasterRepository;
	
	@Autowired
	private RetailVendorMasterRepository retailVendorMasterRepository;
	
	@Autowired
	private CustomerRepository customerRepository;
	
	public RetailMaterialTranHrdCC() {
		super(MaterialTranHrdBean.class, MaterialTranHrd.class);
	}
	
	public RetailMaterialTranHrdCC(Class prototypeA, Class prototypeB) {
		super(prototypeA, prototypeB);
	}
	
	public void setMapper(Mapper arg0) {
		
	}

	@Override
	public MaterialTranHrdBean convertFrom(MaterialTranHrd src, MaterialTranHrdBean dest) {
		return null;
	}

	@Override
	public MaterialTranHrd convertTo(MaterialTranHrdBean src, MaterialTranHrd dest) {
		if(src != null) {
			BranchMaster branch = retailBranchMasterRepository.findOne(src.getBranchId());
			if(src.getVendorId() > 0) {
				VendorMaster vendor = retailVendorMasterRepository.findOne(src.getVendorId());
				Customer customer = vendor.getAccount().getCustomerAccounts().get(0).getCustomer();
				dest.setCustomer(customer);
			} else {
				Customer customer = customerRepository.findOne(src.getCustomerId());
				if(customer == null) {
					String errorMsg = "Payment is done against any customer. CustomerId: " + src.getCustomerId() + " does not exists in our records";
					log.error(errorMsg);
					throw new RetailException(errorMsg, RetailBusinessConstants.EXCEPTION_RETAIL_PAYMENT);
				}
				dest.setCustomer(customer);
			}
			dest.setBranchMaster(branch);
		}
		return dest;
	}
}
